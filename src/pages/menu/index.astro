---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
import { db } from "../../lib/db.ts";

const url = new URL(Astro.request.url);
const selectedIngredientIds = url.searchParams.getAll("ingredients").map(id => Number(id));

let ingredientesPorTipo = {};

if (selectedIngredientIds.length > 0) {
  const ingredientesSeleccionados = await db
    .selectFrom("ingredients")
    .innerJoin("Ingredient_Types", "ingredients.ingType_ID", "Ingredient_Types.ingType_ID")
    .select([
      "ingredients.ingredient_ID",
      "ingredients.nombre_Ingrediente", 
      "ingredients.porcion_Ingrediente",
      "ingredients.unidad_Ingrediente",
      "ingredients.ingType_ID",
      "Ingredient_Types.ingType_Name"
    ])
    .where("ingredients.ingredient_ID", "in", selectedIngredientIds)
    .execute();

  // Agrupa por tipo
  ingredientesPorTipo = ingredientesSeleccionados.reduce((acc, ing) => {
    const key = String(ing.ingType_ID);
    if (!acc[key]) acc[key] = [];
    acc[key].push(ing);
    return acc;
  }, {});
}

const tiemposComida = ['Desayuno', 'Batido', 'Almuerzo', 'Comida', 'Colación', 'Cena'];
const diasSemana = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];

const equivalentesPorTiempo = {
  'Desayuno': [
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 }
  ],
  'Batido': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '7', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '8', nombre: '1 lácteo', cantidad: 1 }
  ],
  'Almuerzo': [
    { tipoId: '5', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '2', nombre: '2 origen animal', cantidad: 2 },
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 }
  ],
  'Comida': [
    { tipoId: '2', nombre: '2 vegetales', cantidad: 2 },
    { tipoId: '1', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '6', nombre: '1 grasa y aceite', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Colación': [
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 },
    { tipoId: '7', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Cena': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '5', nombre: '3 origen animal', cantidad: 1 },
    { tipoId: '2', nombre: '1 cereal', cantidad: 1 }
  ]
};
---

<Layout>
  {Object.keys(ingredientesPorTipo).length === 0 ? (
    <div class="min-h-screen flex items-center justify-center bg-gray-50">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Menú Semanal</h1>
        <p class="text-gray-600 mb-6">No se seleccionaron ingredientes</p>
        <a href="/" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition">
          Volver a seleccionar ingredientes
        </a>
      </div>
    </div>
  ) : (
    <div class="h-screen flex flex-col" style="background: linear-gradient(135deg, #4c1d95 0%, #1e1b4b 50%, #000000 100%);">
      <div class="text-center py-6 flex-shrink-0">
        <h1 class="text-3xl font-bold text-white mb-4">Menú Semanal</h1>
        <button 
          id="generar-nuevo-menu"
          class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-full font-semibold transition duration-200"
        >
          Generar menú aleatorio
        </button>
        <p class="text-white/80 mt-3 text-sm">Semana 1 de 2</p>
      </div>
      <div class="flex-1 px-4 pb-4 overflow-hidden">
        <div class="h-full w-full bg-white rounded-lg shadow-xl overflow-hidden flex flex-col">
          <!-- Contenedor responsivo -->
          <div class="overflow-x-auto w-full h-full">
            <table class="w-full min-w-[800px] table-fixed">
              <thead class="flex-shrink-0">
                <tr class="bg-gray-100">
                  <th class="px-2 py-2 text-left font-bold text-gray-800 border-r border-gray-300 text-xs sticky left-0 bg-gray-100 z-10">
                    TIPO DE ALIMENTO
                  </th>
                  {diasSemana.map(dia => (
                    <th class="px-2 py-2 text-center font-bold text-gray-800 border-r border-gray-300 text-xs">
                      {dia.toUpperCase()}
                    </th>
                  ))}
                  <th class="px-2 py-2 text-center font-bold text-gray-800 text-xs bg-gray-100 sticky right-0 z-10">
                    EQUIVALENCIAS
                  </th>
                </tr>
              </thead>
              <tbody class="flex-1">
                {tiemposComida.map((tiempo, index) => (
                  <tr class="border-b border-gray-200">
                    <td class="px-2 py-2 font-semibold text-gray-900 border-r border-gray-300 bg-gray-50 align-top text-xs sticky left-0 z-10">
                      {tiempo}
                    </td>
                    {diasSemana.map(dia => (
                      <td class="px-2 py-2 border-r border-gray-300 align-top">
                        <div id={`${tiempo.toLowerCase().replace(/\s+/g, '-')}-${dia.toLowerCase()}`} class="space-y-1">
                          <!-- Ingredientes generados aparecerán aquí -->
                        </div>
                      </td>
                    ))}
                    <td class="px-2 py-2 bg-gray-50 align-top sticky right-0 z-10">
                      <div class="space-y-1">
                        {equivalentesPorTiempo[tiempo]?.map(equiv => (
                          <div class="text-xs text-gray-700">
                            {equiv.nombre}
                          </div>
                        ))}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  )}

  <script define:vars={{ ingredientesPorTipo, tiemposComida, diasSemana, equivalentesPorTiempo }}>
    let ingredientesUsados = new Set();

    const coloresPorTipo = {
      '1': 'text-green-600',    // Vegetales
      '2': 'text-red-600',      // Origen animal  
      '4': 'text-orange-500',   // Frutas
      '5': 'text-blue-600',     // Cereales
      '6': 'text-purple-600',   // Grasas
      '7': 'text-pink-600',     // Grasa con proteína
      '8': 'text-cyan-600'      // Lácteos
    };

    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    function generarIngredientesParaTiempo(tiempo, evitarRepeticion = true) {
      const tiempoKey = tiempo.toLowerCase().replace(/\s+/g, '-');
      const equivalentes = equivalentesPorTiempo[tiempo];
      
      if (!equivalentes) return;

      diasSemana.forEach(dia => {
        const celda = document.getElementById(`${tiempoKey}-${dia.toLowerCase()}`);
        const ingredientesDelDia = [];
        
        equivalentes.forEach(equiv => {
          const ingredientesDelTipo = ingredientesPorTipo[equiv.tipoId];
          
          if (ingredientesDelTipo && ingredientesDelTipo.length > 0) {
            let disponibles = [...ingredientesDelTipo];
            
            if (evitarRepeticion && disponibles.length > equiv.cantidad) {
              disponibles = disponibles.filter(ing => !ingredientesUsados.has(ing.ingredient_ID));
              
              if (disponibles.length < equiv.cantidad) {
                disponibles = [...ingredientesDelTipo];
              }
            }
            
            const shuffled = shuffleArray(disponibles);
            const seleccionados = shuffled.slice(0, Math.min(equiv.cantidad, shuffled.length));
            
            if (evitarRepeticion) {
              seleccionados.forEach(ing => ingredientesUsados.add(ing.ingredient_ID));
            }
            
            ingredientesDelDia.push(...seleccionados);
          }
        });

        celda.innerHTML = ingredientesDelDia.map(ing => {
          const colorClass = coloresPorTipo[ing.ingType_ID] || 'text-gray-700';
          return `<div class="ingredient-item cursor-pointer hover:bg-gray-100 px-1 py-0.5 rounded transition-colors duration-200" data-ingredient-id="${ing.ingredient_ID}" data-tipo-id="${ing.ingType_ID}" data-celda-id="${tiempoKey}-${dia.toLowerCase()}">
            <div class="font-medium ${colorClass} text-xs leading-tight">${ing.nombre_Ingrediente}  ${ing.porcion_Ingrediente} ${ing.unidad_Ingrediente}(s) </div>
          </div>`;
        }).join('');
      });
    }

    function reemplazarIngredienteIndividual(ingredientElement) {
      const ingredientId = parseInt(ingredientElement.dataset.ingredientId);
      const tipoId = ingredientElement.dataset.tipoId;
      const celdaId = ingredientElement.dataset.celdaId;
      
      const ingredientesDelTipo = ingredientesPorTipo[tipoId];
      if (!ingredientesDelTipo || ingredientesDelTipo.length <= 1) return;
      
      const otrosIngredientes = ingredientesDelTipo.filter(ing => ing.ingredient_ID !== ingredientId);
      const nuevoIngrediente = otrosIngredientes[Math.floor(Math.random() * otrosIngredientes.length)];
      
      const colorClass = coloresPorTipo[tipoId] || 'text-gray-700';
      ingredientElement.innerHTML = `
        <div class="font-medium ${colorClass} text-xs leading-tight">${nuevoIngrediente.nombre_Ingrediente}</div>
      `;
      
      ingredientElement.dataset.ingredientId = nuevoIngrediente.ingredient_ID;
    }

    function configurarEventListeners() {
      document.querySelectorAll('.ingredient-item').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          reemplazarIngredienteIndividual(this);
        });
      });
    }

    function generarMenuCompleto(nuevo = false) {
      if (nuevo) {
        ingredientesUsados.clear();
      }
      
      tiemposComida.forEach(tiempo => {
        generarIngredientesParaTiempo(tiempo, nuevo);
      });
      
      setTimeout(configurarEventListeners, 100);
    }

    document.addEventListener('DOMContentLoaded', () => {
      generarMenuCompleto(false);
      
      const botonNuevoMenu = document.getElementById('generar-nuevo-menu');
      if (botonNuevoMenu) {
        botonNuevoMenu.addEventListener('click', () => {
          generarMenuCompleto(true);
        });
      }
    });
  </script>
</Layout>
