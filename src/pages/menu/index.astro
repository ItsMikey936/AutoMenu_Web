---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
import { db } from "../../lib/db.ts";

const url = new URL(Astro.request.url);
const selectedIngredientIds = url.searchParams.getAll("ingredients").map(id => Number(id));

let ingredientesPorTipo = {};

if (selectedIngredientIds.length > 0) {
  const ingredientesSeleccionados = await db
    .selectFrom("ingredients")
    .innerJoin("Ingredient_Types", "ingredients.ingType_ID", "Ingredient_Types.ingType_ID")
    .select([
      "ingredients.ingredient_ID",
      "ingredients.nombre_Ingrediente", 
      "ingredients.porcion_Ingrediente",
      "ingredients.unidad_Ingrediente",
      "ingredients.ingType_ID",
      "Ingredient_Types.ingType_Name"
    ])
    .where("ingredients.ingredient_ID", "in", selectedIngredientIds)
    .execute();

  ingredientesPorTipo = ingredientesSeleccionados.reduce((acc, ing) => {
    const key = String(ing.ingType_ID);
    if (!acc[key]) acc[key] = [];
    acc[key].push(ing);
    return acc;
  }, {});
}

const tiemposComida = ['Desayuno', 'Batido post-gym', 'Almuerzo', 'Comida', 'Colación', 'Cena'];
const diasSemana = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];
---

<Layout>
  {Object.keys(ingredientesPorTipo).length === 0 ? (
    <div class="min-h-screen flex items-center justify-center bg-gray-50 px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Menú Semanal</h1>
        <p class="text-gray-600 mb-6">No se seleccionaron ingredientes</p>
        <a href="/list" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition">
          Volver a seleccionar ingredientes
        </a>
      </div>
    </div>
  ) : (
    <div class="min-h-screen bg-slate-50 py-10 px-4 sm:px-6 lg:px-8">
      <div class="max-w-7xl mx-auto">
        <h1 class="text-4xl font-extrabold text-center text-slate-800 mb-10 tracking-tight">Menú Semanal</h1>

        <div class="flex flex-col md:flex-row gap-6 flex-wrap">
          <!-- Tabla del menú -->
          <div class="flex-1 bg-white rounded-lg shadow-lg overflow-x-auto">
            <table class="min-w-full">
              <thead>
                <tr class="bg-gray-100">
                  <th class="px-4 py-3 text-left font-semibold text-gray-700 border-r"></th>
                  {diasSemana.map(dia => (
                    <th class="px-4 py-3 text-center font-semibold text-gray-700 border-r">{dia}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {tiemposComida.map((tiempo, index) => (
                  <tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td class="px-4 py-6 font-medium text-gray-900 border-r border-b">{tiempo}</td>
                    {diasSemana.map(dia => (
                      <td class="px-4 py-6 border-r border-b min-w-[120px]">
                        <div id={`${tiempo.toLowerCase().replace(/\s+/g, '-')}-${dia.toLowerCase()}`} class="min-h-[60px] text-sm text-gray-600">
                          <!-- Ingredientes generados aparecerán aquí -->
                        </div>
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <!-- Panel de configuración con pestañas -->
          <div class="w-full md:max-w-md lg:w-80 bg-white rounded-xl shadow-xl p-6 border border-slate-200">
            <h2 class="text-2xl font-bold text-purple-700 mb-6">Configurar Menú</h2>

            <div class="space-y-4">
              {tiemposComida.map(tiempo => (
                <div class="border rounded-lg overflow-hidden">
                  <button 
                    type="button"
                    class="w-full flex justify-between items-center px-4 py-3 bg-purple-100 hover:bg-purple-200 text-purple-800 font-semibold text-sm transition"
                    onclick={`document.getElementById('panel-${tiempo.toLowerCase().replace(/\s+/g, '-')}').classList.toggle('hidden')`}
                  >
                    <span>{tiempo}</span>
                    <svg class="w-4 h-4 transform transition-transform duration-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>

                  <div id={`panel-${tiempo.toLowerCase().replace(/\s+/g, '-')}`} class="hidden px-4 py-4 bg-white">
                    <div class="space-y-3 mb-4">
                      {Object.entries(ingredientesPorTipo).map(([tipoID, grupo]) => (
                        <div class="bg-slate-50 p-3 rounded-lg border">
                          <label class="flex items-center justify-between gap-2 text-sm text-slate-700 mb-2">
                            <div class="flex items-center gap-2">
                              <input 
                                type="checkbox" 
                                class={`tiempo-${tiempo.toLowerCase().replace(/\s+/g, '-')}-tipo accent-purple-600`}
                                data-tipo-id={tipoID}
                                checked
                              />
                              <span class="font-medium">{grupo[0].ingType_Name}</span>
                            </div>
                          </label>
                          <div class="ml-6">
                            <label class="flex items-center gap-2 text-xs text-slate-600">
                              <span>Porciones:</span>
                              <input 
                                type="number" 
                                min="1" 
                                max="5" 
                                value="1"
                                class={`tiempo-${tiempo.toLowerCase().replace(/\s+/g, '-')}-porciones-${tipoID} w-16 sm:w-20 px-2 py-1 border border-slate-300 rounded text-center text-xs focus:outline-none focus:ring-2 focus:ring-purple-500`}
                                data-tipo-id={tipoID}
                              />
                            </label>
                          </div>
                        </div>
                      ))}
                    </div>
                    <button 
                      class="w-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-semibold transition duration-200 flex items-center justify-center gap-2 text-sm"
                      data-tiempo={tiempo}
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                      </svg>
                      Generar {tiempo}
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )}

  <script define:vars={{ ingredientesPorTipo, tiemposComida, diasSemana }}>
    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    function generarIngredientesParaTiempo(tiempo) {
      const tiempoKey = tiempo.toLowerCase().replace(/\s+/g, '-');
      const checkboxes = document.querySelectorAll(`.tiempo-${tiempoKey}-tipo:checked`);
      const tiposSeleccionados = Array.from(checkboxes).map(cb => cb.dataset.tipoId);
      
      if (tiposSeleccionados.length === 0) {
        alert('Selecciona al menos un tipo de ingrediente para ' + tiempo);
        return;
      }

      diasSemana.forEach(dia => {
        const celda = document.getElementById(`${tiempoKey}-${dia.toLowerCase()}`);
        const ingredientesDelDia = [];
        
        tiposSeleccionados.forEach(tipoId => {
          const ingredientesDelTipo = ingredientesPorTipo[tipoId];
          const porcionesInput = document.querySelector(`.tiempo-${tiempoKey}-porciones-${tipoId}`);
          const porciones = parseInt(porcionesInput?.value || 1);
          
          if (ingredientesDelTipo && ingredientesDelTipo.length > 0) {
            const shuffled = shuffleArray(ingredientesDelTipo);
            ingredientesDelDia.push(...shuffled.slice(0, Math.min(porciones, ingredientesDelTipo.length)));
          }
        });

        const shuffledFinal = shuffleArray(ingredientesDelDia);
        celda.innerHTML = shuffledFinal.map(ing => 
          `<div class="mb-1 text-xs bg-slate-100 px-2 py-1 rounded">${ing.nombre_Ingrediente} <span class="text-slate-500">(${ing.porcion_Ingrediente} ${ing.unidad_Ingrediente})</span></div>`
        ).join('');
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      const botones = document.querySelectorAll('button[data-tiempo]');
      botones.forEach(boton => {
        boton.addEventListener('click', (e) => {
          e.preventDefault();
          const tiempo = e.target.dataset.tiempo;
          generarIngredientesParaTiempo(tiempo);
        });
      });
    });
  </script>
</Layout>
