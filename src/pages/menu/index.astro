---
// Importa el layout principal y componentes necesarios
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
import { db } from "../../lib/db.ts";
import RandomMenuButton from "../../components/Buttons/randomMenuButton.astro";
import MealTimeConf from "../../components/Buttons/mealTimeConf.astro";
import MealTimeModal from "../../components/menus/mealTModal.astro";
import MealTimeEditModal from "../../components/menus/mealTMEspecific.astro";

// Obtiene los ingredientes seleccionados desde la URL
const url = new URL(Astro.request.url);
const selectedIngredientIds = url.searchParams.getAll("ingredients").map(id => Number(id));

let ingredientesPorTipo = {};

// Si hay ingredientes seleccionados, consulta la base de datos y los agrupa por tipo
if (selectedIngredientIds.length > 0) {
  const ingredientesSeleccionados = await db
    .selectFrom("ingredients")
    .innerJoin("Ingredient_Types", "ingredients.ingType_ID", "Ingredient_Types.ingType_ID")
    .select([
      "ingredients.ingredient_ID",
      "ingredients.nombre_Ingrediente", 
      "ingredients.porcion_Ingrediente",
      "ingredients.unidad_Ingrediente",
      "ingredients.ingType_ID",
      "Ingredient_Types.ingType_Name"
    ])
    .where("ingredients.ingredient_ID", "in", selectedIngredientIds)
    .execute();

  // Agrupa los ingredientes por tipo
  ingredientesPorTipo = ingredientesSeleccionados.reduce((acc, ing) => {
    const key = String(ing.ingType_ID);
    if (!acc[key]) acc[key] = [];
    acc[key].push(ing);
    return acc;
  }, {});
}

// Define los tiempos de comida y días de la semana
let tiemposComida = ['Desayuno', 'Batido', 'Almuerzo', 'Comida', 'Colación', 'Cena'];
const diasSemana = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];

// Equivalencias por tiempo de comida (tipo de alimento y cantidad)
let equivalentesPorTiempo = {
  'Desayuno': [
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 }
  ],
  'Batido': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '8', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '7', nombre: '1 lácteo', cantidad: 1 }
  ],
  'Almuerzo': [
    { tipoId: '5', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '2', nombre: '2 origen animal', cantidad: 2 },
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 }
  ],
  'Comida': [
    { tipoId: '2', nombre: '2 vegetales', cantidad: 2 },
    { tipoId: '1', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '6', nombre: '1 grasa y aceite', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Colación': [
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 },
    { tipoId: '7', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Cena': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '5', nombre: '3 origen animal', cantidad: 1 },
    { tipoId: '2', nombre: '1 cereal', cantidad: 1 }
  ]
};

// Horarios por tiempo de comida
let horariosPorTiempo = {
  'Desayuno': '07:00',
  'Batido': '10:00',
  'Almuerzo': '13:00',
  'Comida': '16:00',
  'Colación': '18:00',
  'Cena': '20:00'
};

// Tipos de ingredientes disponibles
const tiposIngredientes = [
  { id: '1', nombre: 'Vegetales' },
  { id: '2', nombre: 'Origen Animal' },
  { id: '3', nombre: 'Leguminosas' },
  { id: '4', nombre: 'Frutas' },
  { id: '5', nombre: 'Cereales' },
  { id: '6', nombre: 'Grasas y Aceites' },
  { id: '7', nombre: 'Lácteos' },
  { id: '8', nombre: 'Grasa con Proteína' },
  { id: '9', nombre: 'Azúcares' }
];
---

<Layout>
    <div class="h-screen flex flex-col" style="background: linear-gradient(135deg, #4c1d95 0%, #1e1b4b 50%, #000000 100%);">
      <div class="text-center py-6 flex-shrink-0">
        <h1 class="text-3xl font-bold text-white mb-4">Menú Semanal Personalizado</h1>
        <div class="flex justify-center gap-4 flex-wrap">
          

        </div>
      </div>

      <div class="flex-1 px-4 pb-4 overflow-hidden">
        <div class="flex justify-end mb-4">
          <button 
            id="exportar-pdf"
            class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded font-semibold text-sm transition"
          >
            Exportar ingredientes a PDF
          </button>
        </div>
        <div class="h-full w-full bg-white rounded-lg shadow-xl overflow-hidden flex flex-col">
          <!-- Contenedor responsivo de la tabla -->
          <div class="overflow-x-auto w-full h-full">
            <table class="w-full min-w-[800px] table-fixed">
              <thead class="flex-shrink-0">
                <tr class="bg-gray-100">
                  {/* Elimina la columna de tipo de alimento */}
                  {/* Renderiza los días de la semana como columnas */}
                  {diasSemana.map(dia => (
                    <th class="px-2 py-2 text-center font-bold text-gray-800 border-r border-gray-300 text-xs">
                      {dia.toUpperCase()}
                    </th>
                  ))}
                  {/* Elimina la columna de equivalencias */}
                </tr>
              </thead>
              <tbody class="flex-1" id="tabla-tiempos">
                <!-- Las filas de cuadriculas se generan dinámicamente -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  )}

  <script define:vars={{ ingredientesPorTipo, tiemposComida, diasSemana, equivalentesPorTiempo, tiposIngredientes, horariosPorTiempo }}>
    // Set para evitar repetir ingredientes en el menú
    let ingredientesUsados = new Set();
    // Lista de tiempos de comida personalizados
    let tiemposPersonalizados = [...tiemposComida];
    // Equivalencias personalizadas por tiempo de comida
    let equivalenciasPersonalizadas = {};
    
    // Inicializa equivalencias personalizadas con todos los días aplicables
    Object.keys(equivalentesPorTiempo).forEach(tiempo => {
      equivalenciasPersonalizadas[tiempo] = {
        equivalencias: equivalentesPorTiempo[tiempo],
        diasAplicables: [...diasSemana] // Por defecto todos los días
      };
    });
    
    // Variable para saber qué tiempo se está editando
    let tiempoEditando = null;

    // Colores para cada tipo de ingrediente en la tabla
    const coloresPorTipo = {
      '1': 'text-green-600',    // Vegetales
      '2': 'text-red-600',      // Origen animal  
      '4': 'text-orange-500',   // Frutas
      '5': 'text-blue-600',     // Cereales
      '6': 'text-purple-600',   // Grasas
      '7': 'text-pink-600',     // Grasa con proteína
      '8': 'text-cyan-600'      // Lácteos
    };

    // Paleta de colores por tipo de ingrediente (usa tailwind para ejemplo)
    const bgColoresPorTipo = {
      '1': 'bg-green-600 text-white',      // Vegetales
      '2': 'bg-red-600 text-white',        // Origen Animal
      '3': 'bg-red-600 text-white',        // Leguminosas (igual que Origen Animal)
      '4': 'bg-blue-500 text-white',       // Frutas
      '5': 'bg-purple-600 text-white',     // Cereales
      '6': 'bg-yellow-400 text-black',     // Aceites y grasas
      '7': 'bg-orange-500 text-white',     // Grasas con proteína
      '8': 'bg-blue-200 text-black',       // Lácteos
      '9': 'bg-gray-400 text-black'        // Azúcar
    };

    // Mezcla aleatoriamente un arreglo (para ingredientes)
    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    // Genera los ingredientes para cada celda de la tabla según equivalencias
    function generarIngredientesParaTiempo(tiempo, evitarRepeticion = true) {
      const tiempoKey = tiempo.toLowerCase().replace(/\s+/g, '-');
      const tiempoData = equivalenciasPersonalizadas[tiempo];
      
      if (!tiempoData || !tiempoData.equivalencias) return;

      diasSemana.forEach(dia => {
        const celda = document.getElementById(`${tiempoKey}-${dia.toLowerCase()}`);
        if (!celda) return;
        
        // Si el tiempo no aplica en ese día, muestra mensaje
        if (!tiempoData.diasAplicables.includes(dia)) {
          celda.innerHTML = '<div class="text-xs text-gray-400 italic">No aplica</div>';
          return;
        }
        
        const ingredientesDelDia = [];
        
        // Para cada equivalencia, selecciona ingredientes del tipo correspondiente
        tiempoData.equivalencias.forEach(equiv => {
          const ingredientesDelTipo = ingredientesPorTipo[equiv.tipoId];
          
          if (ingredientesDelTipo && ingredientesDelTipo.length > 0) {
            if (equiv.tipoId === '2' || equiv.tipoId === '5') { // Origen animal o cereales
              let disponibles = [...ingredientesDelTipo];
              
              // Evita repetir ingredientes si hay suficientes
              if (evitarRepeticion && disponibles.length > 1) {
                disponibles = disponibles.filter(ing => !ingredientesUsados.has(ing.ingredient_ID));
                
                if (disponibles.length === 0) {
                  disponibles = [...ingredientesDelTipo];
                }
              }
              
              const shuffled = shuffleArray(disponibles);
              const ingredienteSeleccionado = shuffled[0];
              
              if (evitarRepeticion) {
                ingredientesUsados.add(ingredienteSeleccionado.ingredient_ID);
              }
              
              // Multiplica la porción por la cantidad de equivalencias
              const porcionMultiplicada = parseInt(ingredienteSeleccionado.porcion_Ingrediente) * equiv.cantidad;
              
              // Crea un objeto con la porción multiplicada
              const ingredienteConPorcionMultiplicada = {
                ...ingredienteSeleccionado,
                porcion_Ingrediente: porcionMultiplicada
              };
              
              ingredientesDelDia.push(ingredienteConPorcionMultiplicada);
            } else {
              let disponibles = [...ingredientesDelTipo];
              
              // Evita repetir ingredientes si hay suficientes
              if (evitarRepeticion && disponibles.length > equiv.cantidad) {
                disponibles = disponibles.filter(ing => !ingredientesUsados.has(ing.ingredient_ID));
                
                if (disponibles.length < equiv.cantidad) {
                  disponibles = [...ingredientesDelTipo];
                }
              }
              
              const shuffled = shuffleArray(disponibles);
              const seleccionados = shuffled.slice(0, Math.min(equiv.cantidad, shuffled.length));
              
              if (evitarRepeticion) {
                seleccionados.forEach(ing => ingredientesUsados.add(ing.ingredient_ID));
              }
              
              ingredientesDelDia.push(...seleccionados);
            }
          }
        });

        // Renderiza los ingredientes en la celda
        celda.innerHTML = ingredientesDelDia.map(ing => {
          const colorClass = coloresPorTipo[ing.ingType_ID] || 'text-gray-700';
          return `<div class="ingredient-item cursor-pointer hover:bg-gray-100 px-1 py-0.5 rounded transition-colors duration-200" data-ingredient-id="${ing.ingredient_ID}" data-tipo-id="${ing.ingType_ID}" data-celda-id="${tiempoKey}-${dia.toLowerCase()}">
            <div class="font-medium ${colorClass} text-xs leading-tight">${ing.nombre_Ingrediente} ${ing.porcion_Ingrediente} ${ing.unidad_Ingrediente}</div>
          </div>`;
        }).join('');
      });
    }

    // Permite reemplazar un ingrediente individualmente al hacer clic
    function reemplazarIngredienteIndividual(ingredientElement) {
      const ingredientId = parseInt(ingredientElement.dataset.ingredientId);
      const tipoId = ingredientElement.dataset.tipoId;
      const celdaId = ingredientElement.dataset.celdaId;
      
      const ingredientesDelTipo = ingredientesPorTipo[tipoId];
      if (!ingredientesDelTipo || ingredientesDelTipo.length <= 1) return;
      
      const otrosIngredientes = ingredientesDelTipo.filter(ing => ing.ingredient_ID !== ingredientId);
      const nuevoIngrediente = otrosIngredientes[Math.floor(Math.random() * otrosIngredientes.length)];
      
      const colorClass = coloresPorTipo[tipoId] || 'text-gray-700';
      ingredientElement.innerHTML = `
        <div class="font-medium ${colorClass} text-xs leading-tight">${nuevoIngrediente.nombre_Ingrediente} ${nuevoIngrediente.porcion_Ingrediente} ${nuevoIngrediente.unidad_Ingrediente}</div>
      `;
      
      ingredientElement.dataset.ingredientId = nuevoIngrediente.ingredient_ID;
    }

    // Configura los eventos para permitir reemplazo individual de ingredientes
    function configurarEventListeners() {
      document.querySelectorAll('.ingredient-item').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          reemplazarIngredienteIndividual(this);
        });
      });
    }

    function configurarEventListenersIngredientes() {
      document.querySelectorAll('.ingredient-item').forEach(item => {
        item.addEventListener('click', function(e) {
          e.stopPropagation();
          const celdaId = this.closest('td').id;
          const idx = this.dataset.idx;
          const datos = datosCeldasPersonalizadas[celdaId];
          if (!datos || !datos.ingredientes[idx]) return;

          const tipoId = datos.ingredientes[idx].tipoId;
          const porcion = datos.ingredientes[idx].porcion;
          const lista = ingredientesPorTipo[tipoId] || [];
          // Elimina el ingrediente actual de la lista para evitar repetirlo
          const otrosIngredientes = lista.filter(ing => ing.ingredient_ID !== datos.ingredientes[idx].ingrediente.ingredient_ID);
          if (otrosIngredientes.length === 0) return;
          const nuevoIngrediente = otrosIngredientes[Math.floor(Math.random() * otrosIngredientes.length)];

          // Actualiza el ingrediente manteniendo la porción
          datos.ingredientes[idx].ingrediente = nuevoIngrediente;
          renderizarTablaTiempos();
          configurarEventListenersIngredientes();
        });
      });
    }

    // Guarda los datos personalizados por celda
    let datosCeldasPersonalizadas = {};

    // Renderiza la tabla vacía
    function renderizarTablaTiempos() {
      const tbody = document.getElementById('tabla-tiempos');
      tbody.innerHTML = Array(7).fill(0).map((_, rowIdx) => `
    <tr>
      ${Array(7).fill(0).map((_, colIdx) => {
        const celdaId = `celda-${rowIdx}-${colIdx}`;
        const datos = datosCeldasPersonalizadas[celdaId];
        return `
          <td class="px-2 py-2 border cursor-pointer" id="${celdaId}">
            ${datos ? `
              <div>
                <div class="font-bold">${datos.nombre}</div>
                <div class="text-xs">
                  ${datos.ingredientes.map((ing, idx) => {
                    const cantidadTotal = (parseFloat(ing.porcion) || 1) * (parseFloat(ing.ingrediente.porcion_Ingrediente) || 1);
                    const bgColor = bgColoresPorTipo[ing.tipoId] || 'bg-gray-200 text-black';
                    return `
                      <div class="ingredient-item cursor-pointer px-2 py-1 rounded mb-1 ${bgColor}" data-idx="${idx}">
                        ${ing.tipoNombre}: ${ing.ingrediente.nombre_Ingrediente} (${cantidadTotal} ${ing.ingrediente.unidad_Ingrediente})
                      </div>
                    `;
                  }).join('')}
                </div>
              </div>
            ` : '<span class="text-gray-400 text-xs">Vacío</span>'}
          </td>
        `;
      }).join('')}
    </tr>
  `).join('');
  configurarEventListenersCeldas();
  configurarEventListenersIngredientes();
    }

    // Evento para mostrar formulario al hacer clic en celda
    function configurarEventListenersCeldas() {
      Array(7).fill(0).forEach((_, rowIdx) => {
        Array(7).fill(0).forEach((_, colIdx) => {
          const celdaId = `celda-${rowIdx}-${colIdx}`;
          const celda = document.getElementById(celdaId);
          if (celda) {
            celda.addEventListener('click', () => mostrarFormularioCelda(celdaId));
          }
        });
      });
    }

    // Modal para agregar nombre y varios ingredientes
    function mostrarFormularioCelda(celdaId) {
      let modal = document.getElementById('modal-celda');
      if (!modal) {
        modal = document.createElement('div');
        modal.id = 'modal-celda';
        modal.style.position = 'fixed';
        modal.style.top = '0'; modal.style.left = '0';
        modal.style.width = '100vw'; modal.style.height = '100vh';
        modal.style.background = 'rgba(0,0,0,0.3)';
        modal.style.display = 'flex'; modal.style.alignItems = 'center'; modal.style.justifyContent = 'center';
        modal.innerHTML = `
          <div style="background:white;padding:2rem;border-radius:1rem;min-width:350px;max-width:90vw;">
            <h3 class="font-bold mb-2">Configura la celda</h3>
            <label class="block mb-1">Nombre:</label>
            <input id="nombre-celda" type="text" class="mb-2 w-full border px-2 py-1 rounded"/>
            <div id="ingredientes-list"></div>
            <button id="agregar-ingrediente" class="bg-purple-600 text-white px-2 py-1 rounded mb-2">Agregar ingrediente</button>
            <div class="flex gap-2 justify-end mt-4">
              <button id="guardar-celda" class="bg-blue-600 text-white px-3 py-1 rounded">Guardar</button>
              <button id="cancelar-celda" class="bg-gray-300 px-3 py-1 rounded">Cancelar</button>
            </div>
          </div>
        `;
        document.body.appendChild(modal);
      } else {
        modal.style.display = 'flex';
      }

      // Cargar datos existentes si los hay
      const datos = datosCeldasPersonalizadas[celdaId] || { nombre: '', ingredientes: [] };
      modal.querySelector('#nombre-celda').value = datos.nombre || '';

      // Renderiza los ingredientes actuales
      function renderIngredientesForm() {
        const cont = modal.querySelector('#ingredientes-list');
        cont.innerHTML = datos.ingredientes.map((ing, idx) => `
          <div class="flex gap-2 mb-2 items-center">
            <select class="tipo-ingrediente" data-idx="${idx}">
              ${tiposIngredientes.map(tipo =>
                `<option value="${tipo.id}" ${tipo.id === ing.tipoId ? 'selected' : ''}>${tipo.nombre}</option>`
              ).join('')}
            </select>
            <span class="font-semibold text-xs">${ing.ingrediente?.nombre_Ingrediente || 'Sin ingrediente'}</span>
            <input type="number" min="1" class="porcion" data-idx="${idx}" value="${ing.porcion}" style="width:60px"/>
            <button class="eliminar-ingrediente bg-red-500 text-white px-2 py-1 rounded" data-idx="${idx}">X</button>
          </div>
        `).join('');
      }
      renderIngredientesForm();

      // Agregar ingrediente aleatorio por tipo
      modal.querySelector('#agregar-ingrediente').onclick = function() {
        const tipoAleatorio = tiposIngredientes[Math.floor(Math.random() * tiposIngredientes.length)];
        const lista = ingredientesPorTipo[tipoAleatorio.id] || [];
        const ingredienteAleatorio = lista.length > 0 ? lista[Math.floor(Math.random() * lista.length)] : {};
        datos.ingredientes.push({
          tipoId: tipoAleatorio.id,
          tipoNombre: tipoAleatorio.nombre,
          ingrediente: ingredienteAleatorio,
          porcion: 1
        });
        renderIngredientesForm();
      };

      // Delegación para cambios en tipo y porción
      modal.querySelector('#ingredientes-list').onchange = function(e) {
        const idx = e.target.dataset.idx;
        if (e.target.classList.contains('tipo-ingrediente')) {
          const tipoId = e.target.value;
          datos.ingredientes[idx].tipoId = tipoId;
          datos.ingredientes[idx].tipoNombre = tiposIngredientes.find(t => t.id === tipoId)?.nombre || '';
          // Selecciona ingrediente aleatorio del nuevo tipo
          const lista = ingredientesPorTipo[tipoId] || [];
          datos.ingredientes[idx].ingrediente = lista.length > 0 ? lista[Math.floor(Math.random() * lista.length)] : {};
          renderIngredientesForm();
        }
        if (e.target.classList.contains('porcion')) {
          datos.ingredientes[idx].porcion = e.target.value;
        }
      };

      // Delegación para eliminar ingrediente
      modal.querySelector('#ingredientes-list').onclick = function(e) {
        if (e.target.classList.contains('eliminar-ingrediente')) {
          const idx = e.target.dataset.idx;
          datos.ingredientes.splice(idx, 1);
          renderIngredientesForm();
        }
      };

      // Guardar datos al hacer clic
      modal.querySelector('#guardar-celda').onclick = function() {
        datos.nombre = modal.querySelector('#nombre-celda').value.trim();
        datosCeldasPersonalizadas[celdaId] = {
          nombre: datos.nombre,
          ingredientes: datos.ingredientes.filter(ing => ing.ingrediente && ing.ingrediente.ingredient_ID)
        };
        renderizarTablaTiempos();
        modal.style.display = 'none';
      };

      // Cancelar
      modal.querySelector('#cancelar-celda').onclick = function() {
        modal.style.display = 'none';
      };
    }

    // Genera el menú completo, usando las funciones anteriores
    function generarMenuCompleto(nuevo = false) {
      if (nuevo) {
        ingredientesUsados.clear();
      }
      
      tiemposPersonalizados.forEach(tiempo => {
        generarIngredientesParaTiempo(tiempo, nuevo);
      });
      
      setTimeout(configurarEventListeners, 100);
    }

    // Muestra el modal para gestionar los tiempos de comida
    function mostrarModalTiempos() {
      const modal = document.getElementById('modal-tiempos');
      renderizarListaTiemposPersonalizados();
      modal.classList.remove('hidden');
    }

    // Renderiza la lista de tiempos personalizados en el modal
    function renderizarListaTiemposPersonalizados() {
      const container = document.getElementById('lista-tiempos-personalizados');
      container.innerHTML = tiemposPersonalizados.map((tiempo, index) => `
        <div class="bg-gray-50 p-4 rounded-lg mb-3">
          <div class="flex justify-between items-center mb-2">
            <h4 class="font-semibold text-gray-900">${tiempo}</h4>
            <button 
              class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm eliminar-tiempo-modal"
              data-tiempo="${tiempo}"
            >
              Eliminar
            </button>
          </div>
          <div class="text-sm text-gray-600 mb-1">
            ${equivalenciasPersonalizadas[tiempo]?.equivalencias?.map(equiv => equiv.nombre).join(', ') || 'Sin equivalencias'}
          </div>
          <div class="text-xs text-purple-600 font-semibold mb-1">
            Horario: ${horariosPorTiempo[tiempo] || 'Sin horario'}
          </div>
          <div class="text-xs text-blue-600">
            Días: ${equivalenciasPersonalizadas[tiempo]?.diasAplicables?.join(', ') || 'Todos'}
          </div>
        </div>
      `).join('');
      
      // Configura los eventos para eliminar tiempos desde el modal
      document.querySelectorAll('.eliminar-tiempo-modal').forEach(btn => {
        btn.addEventListener('click', function() {
          const tiempo = this.dataset.tiempo;
          tiemposPersonalizados = tiemposPersonalizados.filter(t => t !== tiempo);
          delete equivalenciasPersonalizadas[tiempo];
          delete horariosPorTiempo[tiempo];
          renderizarListaTiemposPersonalizados();
        });
      });
    }

    // Obtiene todos los ingredientes actuales de la tabla en el momento
    function obtenerIngredientesDeTabla() {
      const ingredientes = [];
      Array(7).fill(0).forEach((_, rowIdx) => {
        Array(7).fill(0).forEach((_, colIdx) => {
          const celdaId = `celda-${rowIdx}-${colIdx}`;
          const datos = datosCeldasPersonalizadas[celdaId];
          if (datos && Array.isArray(datos.ingredientes)) {
            datos.ingredientes.forEach(ing => {
              const cantidadTotal = (parseFloat(ing.porcion) || 1) * (parseFloat(ing.ingrediente.porcion_Ingrediente) || 1);
              ingredientes.push(
                `${datos.nombre ? datos.nombre + ': ' : ''}${ing.tipoNombre}: ${ing.ingrediente.nombre_Ingrediente} (${cantidadTotal} ${ing.ingrediente.unidad_Ingrediente})`
              );
            });
          }
        });
      });
      return ingredientes;
    }

    // Función para exportar ingredientes a PDF
    function exportarIngredientesPDF() {
      // Usa la versión global de jsPDF
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      doc.setFontSize(14);
      doc.text('Lista de ingredientes del menú', 10, 10);

      const ingredientes = obtenerIngredientesDeTabla();
      let y = 20;
      ingredientes.forEach((ing, idx) => {
        doc.text(`${idx + 1}. ${ing}`, 10, y);
        y += 8;
        if (y > 280) {
          doc.addPage();
          y = 20;
        }
      });

      doc.save('ingredientes-menu.pdf');
    }

    // Obtiene los ingredientes agrupados por día
function obtenerIngredientesPorDia() {
  const ingredientesPorDia = {};
  diasSemana.forEach((dia, colIdx) => {
    ingredientesPorDia[dia] = [];
    Array(7).fill(0).forEach((_, rowIdx) => {
      const celdaId = `celda-${rowIdx}-${colIdx}`;
      const datos = datosCeldasPersonalizadas[celdaId];
      if (datos && Array.isArray(datos.ingredientes)) {
        datos.ingredientes.forEach(ing => {
          const cantidadTotal = (parseFloat(ing.porcion) || 1) * (parseFloat(ing.ingrediente.porcion_Ingrediente) || 1);
          ingredientesPorDia[dia].push(
            `${datos.nombre ? datos.nombre + ': ' : ''}${ing.tipoNombre}: ${ing.ingrediente.nombre_Ingrediente} (${cantidadTotal} ${ing.ingrediente.unidad_Ingrediente})`
          );
        });
      }
    });
  });
  return ingredientesPorDia;
}

// Función para exportar ingredientes a PDF agrupados por día
function exportarIngredientesPDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  doc.setFontSize(14);

  const ingredientesPorDia = obtenerIngredientesPorDia();
  let y = 15;

  diasSemana.forEach(dia => {
    doc.setFont(undefined, 'bold');
    doc.text(dia, 10, y);
    y += 8;
    doc.setFont(undefined, 'normal');
    const ingredientes = ingredientesPorDia[dia];
    if (ingredientes.length === 0) {
      doc.text('Sin ingredientes', 15, y);
      y += 8;
    } else {
      ingredientes.forEach((ing, idx) => {
        doc.text(`- ${ing}`, 15, y);
        y += 8;
        if (y > 280) {
          doc.addPage();
          y = 15;
        }
      });
    }
    y += 4;
  });

  doc.save('ingredientes-menu.pdf');
}

// Event listener para el botón
    document.addEventListener('DOMContentLoaded', () => {
      renderizarTablaTiempos();
      generarMenuCompleto(false);
      
      // Botón para generar nuevo menú
      const botonNuevoMenu = document.getElementById('generar-nuevo-menu');
      if (botonNuevoMenu) {
        botonNuevoMenu.addEventListener('click', () => {
          generarMenuCompleto(true);
        });
      }

      const exportarBtn = document.getElementById('exportar-pdf');
      if (exportarBtn) {
        exportarBtn.addEventListener('click', exportarIngredientesPDF);
      }
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</Layout>