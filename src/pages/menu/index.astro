---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
---

<Layout>
  <div class="bg-gradient-to-tr from-black to-purple-700 text-white py-8 text-center">
    <h1 class="text-4xl font-bold mb-5">Menú Semanal</h1>
    <button
      id="generate-btn"
      class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-full font-semibold text-base shadow-[0_4px_15px_rgba(76,175,80,0.3)] transition-all duration-300 hover:-translate-y-0.5 hover:shadow-[0_6px_20px_rgba(76,175,80,0.4)] disabled:bg-gray-400 disabled:cursor-not-allowed disabled:transform-none"
    >
      Generar menú aleatorio
    </button>
  </div>

  <div id="week-counter" class="bg-gray-200 py-2 px-5 text-center font-semibold text-gray-700 border-b border-gray-300 hidden">
    Semana <span id="current-week" class="font-bold text-gray-800">1</span> de 2
  </div>

  <div id="loading" class="text-center py-10 text-gray-700">Cargando ingredientes...</div>
  <div id="error" class="bg-red-100 text-red-700 p-4 my-5 rounded border border-red-300 hidden"></div>

  <div class="overflow-x-auto hidden" id="table-container">
    <table class="w-full table-auto border-collapse text-sm">
      <thead class="bg-gray-200 text-gray-800 uppercase text-[0.85rem] tracking-wide">
        <tr>
          <th class="px-3 py-4 border-b border-gray-300">TIPO DE ALIMENTO</th>
          <th class="px-3 py-4 border-b border-gray-300">LUNES</th>
          <th class="px-3 py-4 border-b border-gray-300">MARTES</th>
          <th class="px-3 py-4 border-b border-gray-300">MIÉRCOLES</th>
          <th class="px-3 py-4 border-b border-gray-300">JUEVES</th>
          <th class="px-3 py-4 border-b border-gray-300">VIERNES</th>
          <th class="px-3 py-4 border-b border-gray-300">SABADO</th>
          <th class="px-3 py-4 border-b border-gray-300">DOMINGO</th>
          <th class="px-3 py-4 border-b border-gray-300">EQUIVALENCIAS</th>
        </tr>
      </thead>
      <tbody id="menu-tbody" class="divide-y divide-gray-200">
        <!-- Filas generadas dinámicamente -->
      </tbody>
    </table>
  </div>

<script>
  const MEAL_CONFIG = {
    'Desayuno': [5, 4],
    'Batido': [4, 8, 5, 7],
    'Almuerzo': [2, 1, 5, 8],
    'Comida': [2, 1, 5, 6, 4],
    'Colación': [1, 8, 4],
    'Cena': [4, 2, 5]
  };

  const EQUIVALENCIAS_CONFIG = {
    'Desayuno': [
      { tipo: 5, cantidad: 1, nombre: 'cereal' },
      { tipo: 4, cantidad: 2, nombre: 'frutas' }
    ],
    'Batido': [
      { tipo: 4, cantidad: 2, nombre: 'frutas' },
      { tipo: 8, cantidad: 1, nombre: 'grasa con proteína' },
      { tipo: 5, cantidad: 1, nombre: 'cereal' },
      { tipo: 7, cantidad: 1, nombre: 'lácteo' }
    ],
    'Almuerzo': [
      { tipo: 2, cantidad: 2, nombre: 'origen animal' },
      { tipo: 1, cantidad: 1, nombre: 'vegetal' },
      { tipo: 5, cantidad: 2, nombre: 'cereales' },
      { tipo: 8, cantidad: 1, nombre: 'grasa con proteína' }
    ],
    'Comida': [
      { tipo: 2, cantidad: 3, nombre: 'origen animal' },
      { tipo: 1, cantidad: 2, nombre: 'vegetales' },
      { tipo: 5, cantidad: 2, nombre: 'cereales' },
      { tipo: 6, cantidad: 1, nombre: 'grasa y aceite' },
      { tipo: 4, cantidad: 1, nombre: 'fruta' }
    ],
    'Colación': [
      { tipo: 1, cantidad: 1, nombre: 'vegetal' },
      { tipo: 8, cantidad: 1, nombre: 'grasa con proteína' },
      { tipo: 4, cantidad: 1, nombre: 'fruta' }
    ],
    'Cena': [
      { tipo: 4, cantidad: 2, nombre: 'frutas' },
      { tipo: 2, cantidad: 3, nombre: 'origen animal' },
      { tipo: 5, cantidad: 1, nombre: 'cereal' }
    ]
  };

  const DAYS = ['LUNES', 'MARTES', 'MIÉRCOLES', 'JUEVES', 'VIERNES', 'SABADO', 'DOMINGO'];
  let ingredientesPorTipo = {};
  let ingredientesUsados = new Set();
  let semanaActual = 1;
  let maxSemanas = 2;

  async function cargarIngredientes() {
    try {
      const response = await fetch('/api/ingredientes');
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      
      ingredientesPorTipo = await response.json();
      
      document.getElementById('loading').style.display = 'none';
      document.getElementById('table-container').style.display = 'block';
      document.getElementById('week-counter').style.display = 'block';
      
      generarTablaVacia();
    } catch (error) {
      console.error('Error al cargar ingredientes:', error);
      document.getElementById('loading').style.display = 'none';
      const errorDiv = document.getElementById('error');
      errorDiv.textContent = `Error al cargar los ingredientes: ${error.message}`;
      errorDiv.style.display = 'block';
    }
  }

  function generarTablaVacia() {
    const tbody = document.getElementById('menu-tbody');
    tbody.innerHTML = '';
    
    Object.keys(MEAL_CONFIG).forEach(meal => {
      const row = document.createElement('tr');
      
      const mealCell = document.createElement('td');
      mealCell.className = 'meal-type';
      mealCell.textContent = meal;
      row.appendChild(mealCell);
      
      DAYS.forEach(day => {
        const dayCell = document.createElement('td');
        dayCell.className = 'day-cell';
        dayCell.id = `${meal}-${day}`;
        row.appendChild(dayCell);
      });
      
      const equivCell = document.createElement('td');
      equivCell.className = 'equivalencias-cell';
      equivCell.innerHTML = generarEquivalenciasHTML(meal);
      row.appendChild(equivCell);
      
      tbody.appendChild(row);
    });
  }

  function generarEquivalenciasHTML(meal) {
    const equivalencias = EQUIVALENCIAS_CONFIG[meal];
    const colores = {
      1: '#059669', 2: '#dc2626', 3: '#7c3aed', 4: '#f59e0b', 
      5: '#2563eb', 6: '#ca8a04', 7: '#06b6d4', 8: '#ec4899', 9: '#6b7280'
    };
    
    return equivalencias.map(equiv =>
      `<div class="bg-gray-300 ingredient-item" >
      <div class="ingredient-bullet bullet-${equiv.tipo}" style="background-color: ${colores[equiv.tipo] || '#6b7280'}"></div>

      <!-- Input para cantidad -->
      <input type="number" class="ingredient-amount" value="${equiv.cantidad}" style="color: ${colores[equiv.tipo] || '#6b7280'};width: 25px; margin-left: 8px;" />

      <!-- Combo box para tipo -->
      <select class="tipo-select" style="color: ${colores[equiv.tipo] || '#6b7280'}; font-weight: 600;">
        <option value="Grupo Alimenticio" ${equiv.tipo === 'Grupo Alimenticio' ? 'selected' : ''}>Grupo Alimenticio</option>
        <option value="O. Animal" ${equiv.tipo === 'O. Animal' ? 'selected' : ''}>O. Animal</option>
        <option value="Cereales" ${equiv.tipo === 'Cereales' ? 'selected' : ''}>Cereales</option>
        <option value="Vegetal" ${equiv.tipo === 'Vegetal' ? 'selected' : ''}>Vegetal</option>
        <option value="Leguminosas" ${equiv.tipo === 'Leguminosas' ? 'selected' : ''}>Leguminosas</option>
        <option value="Lácteos" ${equiv.tipo === 'Lácteos' ? 'selected' : ''}>Lácteos</option>
        <option value="Grasa con Proteína" ${equiv.tipo === 'Grasa con Proteína' ? 'selected' : ''}>Grasa con Proteína</option>
        <option value="Frutas" ${equiv.tipo === 'Frutas' ? 'selected' : ''}>Frutas</option>
        <option value="Grasas y aceites" ${equiv.tipo === 'Grasas y aceites' ? 'selected' : ''}>Grasas y aceites</option>
        <option value="Azúcar" ${equiv.tipo === 'Azúcar' ? 'selected' : ''}>Azúcar</option>
      </select>
    </div>`
    ).join('');
  }

  function seleccionarIngredienteAleatorio(tipoId) {
    const disponibles = ingredientesPorTipo[tipoId]?.filter(
      ing => !ingredientesUsados.has(ing.id_Ingrediente)
    ) || [];
    
    const pool = disponibles.length > 0 ? disponibles : ingredientesPorTipo[tipoId] || [];
    if (pool.length === 0) return null;
    
    const seleccionado = pool[Math.floor(Math.random() * pool.length)];
    ingredientesUsados.add(seleccionado.id_Ingrediente);
    return seleccionado;
  }

  function generarMenu() {
    Object.keys(MEAL_CONFIG).forEach(meal => {
      DAYS.forEach(day => {
        const cell = document.getElementById(`${meal}-${day}`);
        if (cell) cell.innerHTML = '';
      });
    });

    Object.keys(MEAL_CONFIG).forEach(meal => {
      const tiposRequeridos = MEAL_CONFIG[meal];
      
      DAYS.forEach(day => {
        const cell = document.getElementById(`${meal}-${day}`);
        if (!cell) return;
        
        const ingredientesDelDia = tiposRequeridos.map(tipoId => {
          const ingrediente = seleccionarIngredienteAleatorio(tipoId);
          return ingrediente ? {
            ...ingrediente,
            tipoId
          } : null;
        }).filter(Boolean);

        cell.innerHTML = ingredientesDelDia.map(ing => {
          const colores = {
            1: '#059669', 2: '#dc2626', 3: '#7c3aed', 4: '#f59e0b', 
            5: '#2563eb', 6: '#ca8a04', 7: '#06b6d4', 8: '#ec4899', 9: '#6b7280'
          };
          
          return `<div class="ingredient-item">
            <div class="ingredient-bullet bullet-${ing.tipoId}" style="background-color: ${colores[ing.tipoId] || '#6b7280'}"></div>
            <span class="ingredient-name tipo-${ing.tipoId}" style="color: ${colores[ing.tipoId] || '#6b7280'}; font-weight: 600;" title="${ing.ingType_Name}">
              ${ing.nombre_Ingrediente}
            </span>
          </div>`;
        }).join('');
      });
    });

    document.getElementById('current-week').textContent = semanaActual;
    semanaActual++;
    if (semanaActual > maxSemanas) {
      semanaActual = 1;
      ingredientesUsados.clear();
    }
  }

  document.getElementById('generate-btn').addEventListener('click', generarMenu);
  document.addEventListener('DOMContentLoaded', cargarIngredientes);
</script>

</Layout>
