---
// Importa el layout principal y componentes necesarios
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
import { db } from "../../lib/db.ts";

// Obtiene los ingredientes seleccionados desde la URL
const url = new URL(Astro.request.url);
const selectedIngredientIds = url.searchParams.getAll("ingredients").map(id => Number(id));

let ingredientesPorTipo = {};

// Si hay ingredientes seleccionados, consulta la base de datos y los agrupa por tipo
if (selectedIngredientIds.length > 0) {
  const ingredientesSeleccionados = await db
    .selectFrom("ingredients")
    .innerJoin("Ingredient_Types", "ingredients.ingType_ID", "Ingredient_Types.ingType_ID")
    .select([
      "ingredients.ingredient_ID",
      "ingredients.nombre_Ingrediente", 
      "ingredients.porcion_Ingrediente",
      "ingredients.unidad_Ingrediente",
      "ingredients.ingType_ID",
      "Ingredient_Types.ingType_Name"
    ])
    .where("ingredients.ingredient_ID", "in", selectedIngredientIds)
    .execute();

  // Agrupa los ingredientes por tipo
  ingredientesPorTipo = ingredientesSeleccionados.reduce((acc, ing) => {
    const key = String(ing.ingType_ID);
    if (!acc[key]) acc[key] = [];
    acc[key].push(ing);
    return acc;
  }, {});
}

// Define los tiempos de comida y días de la semana
let tiemposComida = ['Desayuno', 'Batido', 'Almuerzo', 'Comida', 'Colación', 'Cena'];
const diasSemana = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];

// Equivalencias por tiempo de comida (tipo de alimento y cantidad)
let equivalentesPorTiempo = {
  'Desayuno': [
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 }
  ],
  'Batido': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '8', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '7', nombre: '1 lácteo', cantidad: 1 }
  ],
  'Almuerzo': [
    { tipoId: '5', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '2', nombre: '2 origen animal', cantidad: 2 },
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 }
  ],
  'Comida': [
    { tipoId: '2', nombre: '2 vegetales', cantidad: 2 },
    { tipoId: '1', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '6', nombre: '1 grasa y aceite', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Colación': [
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 },
    { tipoId: '7', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Cena': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '5', nombre: '3 origen animal', cantidad: 1 },
    { tipoId: '2', nombre: '1 cereal', cantidad: 1 }
  ]
};

// Horarios por tiempo de comida
let horariosPorTiempo = {
  'Desayuno': '07:00',
  'Batido': '10:00',
  'Almuerzo': '13:00',
  'Comida': '16:00',
  'Colación': '18:00',
  'Cena': '20:00'
};

// Tipos de ingredientes disponibles
const tiposIngredientes = [
  { id: '1', nombre: 'Vegetales' },
  { id: '2', nombre: 'Origen Animal' },
  { id: '3', nombre: 'Leguminosas' },
  { id: '4', nombre: 'Frutas' },
  { id: '5', nombre: 'Cereales' },
  { id: '6', nombre: 'Grasas y Aceites' },
  { id: '7', nombre: 'Lácteos' },
  { id: '8', nombre: 'Grasa con Proteína' },
  { id: '9', nombre: 'Azúcares' }
];
---

<Layout>
    <div class="h-screen flex flex-col" style="background: linear-gradient(135deg, #4c1d95 0%, #1e1b4b 50%, #000000 100%);">
      <div class="text-center py-6 flex-shrink-0">
        <h1 class="text-3xl font-bold text-white mb-4">Menú Semanal Personalizado</h1>
      </div>

      <div class="flex-1 px-4 pb-4 overflow-hidden">
        <div class="flex justify-between mb-4">
          <div class="flex gap-2">
            <button 
              id="agregar-fila"
              class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded font-semibold text-sm transition"
            >
              + Agregar Fila
            </button>
            <button 
              id="eliminar-fila"
              class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded font-semibold text-sm transition"
            >
              - Eliminar Fila
            </button>
          </div>
          <button 
            id="exportar-pdf"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded font-semibold text-sm transition"
          >
            Exportar ingredientes a PDF
          </button>
        </div>
        
        <div class="h-full w-full bg-white rounded-lg shadow-xl overflow-hidden flex flex-col">
          <!-- Contenedor responsivo de la tabla -->
          <div class="overflow-x-auto w-full h-full">
            <table class="w-full min-w-[800px] table-fixed">
              <thead class="flex-shrink-0">
                <tr class="bg-gray-100">
                  <th class="px-2 py-2 text-center font-bold text-gray-800 border-r border-gray-300 text-xs w-20">
                    FILA
                  </th>
                  {diasSemana.map(dia => (
                    <th class="px-2 py-2 text-center font-bold text-gray-800 border-r border-gray-300 text-xs">
                      {dia.toUpperCase()}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody class="flex-1" id="tabla-tiempos">
                <!-- Las filas se generan dinámicamente -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

  <script define:vars={{ ingredientesPorTipo, tiemposComida, diasSemana, equivalentesPorTiempo, tiposIngredientes, horariosPorTiempo }}>
    // Variables globales para manejar las filas dinámicamente
    let numeroFilas = 6; // Número inicial de filas
    let filasEliminadas = new Set(); // Para rastrear filas eliminadas
    
    // Set para evitar repetir ingredientes en el menú
    let ingredientesUsados = new Set();
    // Lista de tiempos de comida personalizados
    let tiemposPersonalizados = [...tiemposComida];
    // Equivalencias personalizadas por tiempo de comida
    let equivalenciasPersonalizadas = {};
    
    // Inicializa equivalencias personalizadas con todos los días aplicables
    Object.keys(equivalentesPorTiempo).forEach(tiempo => {
      equivalenciasPersonalizadas[tiempo] = {
        equivalencias: equivalentesPorTiempo[tiempo],
        diasAplicables: [...diasSemana] // Por defecto todos los días
      };
    });
    
    // Variable para saber qué tiempo se está editando
    let tiempoEditando = null;

    // Colores para cada tipo de ingrediente en la tabla
    const coloresPorTipo = {
      '1': 'text-green-600',    // Vegetales
      '2': 'text-red-600',      // Origen animal  
      '4': 'text-orange-500',   // Frutas
      '5': 'text-blue-600',     // Cereales
      '6': 'text-purple-600',   // Grasas
      '7': 'text-pink-600',     // Grasa con proteína
      '8': 'text-cyan-600'      // Lácteos
    };

    // Paleta de colores por tipo de ingrediente
    const bgColoresPorTipo = {
      '1': 'bg-green-600 text-white',      // Vegetales
      '2': 'bg-red-600 text-white',        // Origen Animal
      '3': 'bg-red-600 text-white',        // Leguminosas
      '4': 'bg-blue-500 text-white',       // Frutas
      '5': 'bg-purple-600 text-white',     // Cereales
      '6': 'bg-yellow-400 text-black',     // Aceites y grasas
      '7': 'bg-orange-500 text-white',     // Grasas con proteína
      '8': 'bg-blue-200 text-black',       // Lácteos
      '9': 'bg-gray-400 text-black'        // Azúcar
    };

    // Guarda los datos personalizados por celda
    let datosCeldasPersonalizadas = {};

    // Cargar menú guardado al iniciar
    function cargarMenuGuardado() {
      const guardado = localStorage.getItem('menuPersonalizado');
      if (guardado) {
        try {
          const datos = JSON.parse(guardado);
          datosCeldasPersonalizadas = datos.celdas || {};
          numeroFilas = datos.numeroFilas || 6;
          filasEliminadas = new Set(datos.filasEliminadas || []);
        } catch (e) {
          datosCeldasPersonalizadas = {};
          numeroFilas = 6;
          filasEliminadas = new Set();
        }
      }
    }

    // Guardar menú en localStorage
    function guardarMenu() {
      const datos = {
        celdas: datosCeldasPersonalizadas,
        numeroFilas: numeroFilas,
        filasEliminadas: Array.from(filasEliminadas)
      };
      localStorage.setItem('menuPersonalizado', JSON.stringify(datos));
    }

    // Renderiza la tabla con el número actual de filas
    function renderizarTablaTiempos() {
      const tbody = document.getElementById('tabla-tiempos');
      const filas = [];
      
      for (let rowIdx = 0; rowIdx < numeroFilas; rowIdx++) {
        // Si la fila está eliminada, no la mostramos
        if (filasEliminadas.has(rowIdx)) continue;
        
        const fila = `
          <tr>
            <td class="px-2 py-2 border text-center bg-gray-50 font-semibold text-xs">
              <div class="flex flex-col items-center gap-1">
                <span>Fila ${rowIdx + 1}</span>
                <button class="eliminar-fila-btn bg-red-500 hover:bg-red-600 text-white px-1 py-0.5 rounded text-xs" data-fila="${rowIdx}">
                  ×
                </button>
              </div>
            </td>
            ${Array(7).fill(0).map((_, colIdx) => {
              const celdaId = `celda-${rowIdx}-${colIdx}`;
              const datos = datosCeldasPersonalizadas[celdaId];
              return `
                <td class="px-2 py-2 border cursor-pointer hover:bg-gray-50 transition-colors" id="${celdaId}">
                  ${datos ? `
                    <div>
                      <div class="font-bold text-xs mb-1 text-purple-700">${datos.nombre}</div>
                      <div class="text-xs">
                        ${datos.ingredientes.map((ing, idx) => {
                          const cantidadTotal = (parseFloat(ing.porcion) || 1) * (parseFloat(ing.ingrediente.porcion_Ingrediente) || 1);
                          const bgColor = bgColoresPorTipo[ing.tipoId] || 'bg-gray-200 text-black';
                          return `
                            <div class="ingredient-item cursor-pointer px-1 py-0.5 rounded mb-1 ${bgColor} text-xs" data-idx="${idx}">
                              ${ing.ingrediente.nombre_Ingrediente} (${cantidadTotal} ${ing.ingrediente.unidad_Ingrediente})
                            </div>
                          `;
                        }).join('')}
                      </div>
                    </div>
                  ` : '<span class="text-gray-400 text-xs">Clic para configurar</span>'}
                </td>
              `;
            }).join('')}
          </tr>
        `;
        filas.push(fila);
      }
      
      tbody.innerHTML = filas.join('');
      configurarEventListenersCeldas();
      configurarEventListenersIngredientes();
      configurarEventListenersEliminarFila();
    }

    // Configurar event listeners para eliminar filas individuales
    function configurarEventListenersEliminarFila() {
      document.querySelectorAll('.eliminar-fila-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const filaIdx = parseInt(this.dataset.fila);
          eliminarFila(filaIdx);
        });
      });
    }

    // Función para agregar una nueva fila
    function agregarFila() {
      numeroFilas++;
      guardarMenu();
      renderizarTablaTiempos();
    }

    // Función para eliminar una fila específica
    function eliminarFila(filaIdx) {
      if (confirm(`¿Estás seguro de que quieres eliminar la fila ${filaIdx + 1}?`)) {
        filasEliminadas.add(filaIdx);
        
        // Limpiar datos de las celdas de esta fila
        for (let colIdx = 0; colIdx < 7; colIdx++) {
          const celdaId = `celda-${filaIdx}-${colIdx}`;
          delete datosCeldasPersonalizadas[celdaId];
        }
        
        guardarMenu();
        renderizarTablaTiempos();
      }
    }

    // Función para eliminar la última fila visible
    function eliminarUltimaFila() {
      // Encuentra la última fila que no está eliminada
      let ultimaFilaVisible = -1;
      for (let i = numeroFilas - 1; i >= 0; i--) {
        if (!filasEliminadas.has(i)) {
          ultimaFilaVisible = i;
          break;
        }
      }
      
      if (ultimaFilaVisible >= 0) {
        eliminarFila(ultimaFilaVisible);
      } else {
        alert('No hay filas para eliminar');
      }
    }

    // Evento para mostrar formulario al hacer clic en celda
    function configurarEventListenersCeldas() {
      for (let rowIdx = 0; rowIdx < numeroFilas; rowIdx++) {
        if (filasEliminadas.has(rowIdx)) continue;
        
        for (let colIdx = 0; colIdx < 7; colIdx++) {
          const celdaId = `celda-${rowIdx}-${colIdx}`;
          const celda = document.getElementById(celdaId);
          if (celda) {
            celda.addEventListener('click', () => mostrarFormularioCelda(celdaId));
          }
        }
      }
    }

    function configurarEventListenersIngredientes() {
      document.querySelectorAll('.ingredient-item').forEach(item => {
        item.addEventListener('click', function(e) {
          e.stopPropagation();
          const celdaId = this.closest('td').id;
          const idx = this.dataset.idx;
          const datos = datosCeldasPersonalizadas[celdaId];
          if (!datos || !datos.ingredientes[idx]) return;

          const tipoId = datos.ingredientes[idx].tipoId;
          const porcion = datos.ingredientes[idx].porcion;
          const lista = ingredientesPorTipo[tipoId] || [];
          const otrosIngredientes = lista.filter(ing => ing.ingredient_ID !== datos.ingredientes[idx].ingrediente.ingredient_ID);
          if (otrosIngredientes.length === 0) return;
          const nuevoIngrediente = otrosIngredientes[Math.floor(Math.random() * otrosIngredientes.length)];

          datos.ingredientes[idx].ingrediente = nuevoIngrediente;
          guardarMenu();
          renderizarTablaTiempos();
        });
      });
    }

    // Modal para agregar nombre y varios ingredientes
    function mostrarFormularioCelda(celdaId) {
      let modal = document.getElementById('modal-celda');
      if (!modal) {
        modal = document.createElement('div');
        modal.id = 'modal-celda';
        modal.style.position = 'fixed';
        modal.style.top = '0'; modal.style.left = '0';
        modal.style.width = '100vw'; modal.style.height = '100vh';
        modal.style.background = 'rgba(0,0,0,0.5)';
        modal.style.display = 'flex'; modal.style.alignItems = 'center'; modal.style.justifyContent = 'center';
        modal.style.zIndex = '1000';
        modal.innerHTML = `
          <div style="background:white;padding:2rem;border-radius:1rem;min-width:400px;max-width:90vw;max-height:80vh;overflow-y:auto;">
            <h3 class="font-bold mb-3 text-lg">Configura la celda</h3>
            <label class="block mb-1 font-semibold">Nombre del tiempo de comida:</label>
            <input id="nombre-celda" type="text" class="mb-3 w-full border px-3 py-2 rounded" placeholder="Ej: Desayuno, Merienda, etc."/>
            <div id="ingredientes-list"></div>
            <button id="agregar-ingrediente" class="bg-purple-600 hover:bg-purple-700 text-white px-3 py-2 rounded mb-3">Agregar ingrediente</button>
            <div class="flex gap-2 justify-end mt-4">
              <button id="guardar-celda" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">Guardar</button>
              <button id="cancelar-celda" class="bg-gray-300 hover:bg-gray-400 px-4 py-2 rounded">Cancelar</button>
            </div>
          </div>
        `;
        document.body.appendChild(modal);
      } else {
        modal.style.display = 'flex';
      }

      // Cargar datos existentes si los hay
      const datos = datosCeldasPersonalizadas[celdaId] || { nombre: '', ingredientes: [] };
      modal.querySelector('#nombre-celda').value = datos.nombre || '';

      // Renderiza los ingredientes actuales
      function renderIngredientesForm() {
        const cont = modal.querySelector('#ingredientes-list');
        cont.innerHTML = datos.ingredientes.map((ing, idx) => `
          <div class="flex gap-2 mb-2 items-center p-2 bg-gray-50 rounded">
            <select class="tipo-ingrediente flex-1" data-idx="${idx}">
              ${tiposIngredientes.map(tipo =>
                `<option value="${tipo.id}" ${tipo.id === ing.tipoId ? 'selected' : ''}>${tipo.nombre}</option>`
              ).join('')}
            </select>
            <input type="number" min="1" class="porcion w-16" data-idx="${idx}" value="${ing.porcion}" placeholder="Cant."/>
            <button class="eliminar-ingrediente bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm" data-idx="${idx}">Eliminar</button>
          </div>
        `).join('');
      }
      renderIngredientesForm();

      // Agregar ingrediente aleatorio por tipo
      modal.querySelector('#agregar-ingrediente').onclick = function() {
        const tipoAleatorio = tiposIngredientes[Math.floor(Math.random() * tiposIngredientes.length)];
        const lista = ingredientesPorTipo[tipoAleatorio.id] || [];
        const ingredienteAleatorio = lista.length > 0 ? lista[Math.floor(Math.random() * lista.length)] : {};
        datos.ingredientes.push({
          tipoId: tipoAleatorio.id,
          tipoNombre: tipoAleatorio.nombre,
          ingrediente: ingredienteAleatorio,
          porcion: 1
        });
        renderIngredientesForm();
      };

      // Delegación para cambios en tipo y porción
      modal.querySelector('#ingredientes-list').onchange = function(e) {
        const idx = e.target.dataset.idx;
        if (e.target.classList.contains('tipo-ingrediente')) {
          const tipoId = e.target.value;
          datos.ingredientes[idx].tipoId = tipoId;
          datos.ingredientes[idx].tipoNombre = tiposIngredientes.find(t => t.id === tipoId)?.nombre || '';
          const lista = ingredientesPorTipo[tipoId] || [];
          datos.ingredientes[idx].ingrediente = lista.length > 0 ? lista[Math.floor(Math.random() * lista.length)] : {};
          renderIngredientesForm();
        }
        if (e.target.classList.contains('porcion')) {
          datos.ingredientes[idx].porcion = e.target.value;
        }
      };

      // Delegación para eliminar ingrediente
      modal.querySelector('#ingredientes-list').onclick = function(e) {
        if (e.target.classList.contains('eliminar-ingrediente')) {
          const idx = e.target.dataset.idx;
          datos.ingredientes.splice(idx, 1);
          renderIngredientesForm();
        }
      };

      // Guardar datos al hacer clic
      modal.querySelector('#guardar-celda').onclick = function() {
        datos.nombre = modal.querySelector('#nombre-celda').value.trim();
        datosCeldasPersonalizadas[celdaId] = {
          nombre: datos.nombre,
          ingredientes: datos.ingredientes.filter(ing => ing.ingrediente && ing.ingrediente.ingredient_ID)
        };
        guardarMenu();
        renderizarTablaTiempos();
        modal.style.display = 'none';
      };

      // Cancelar
      modal.querySelector('#cancelar-celda').onclick = function() {
        modal.style.display = 'none';
      };
    }

    // Obtiene todos los ingredientes actuales de la tabla
    function obtenerIngredientesPorDia() {
      const ingredientesPorDia = {};
      diasSemana.forEach((dia, colIdx) => {
        ingredientesPorDia[dia] = [];
        for (let rowIdx = 0; rowIdx < numeroFilas; rowIdx++) {
          if (filasEliminadas.has(rowIdx)) continue;
          
          const celdaId = `celda-${rowIdx}-${colIdx}`;
          const datos = datosCeldasPersonalizadas[celdaId];
          if (datos && Array.isArray(datos.ingredientes)) {
            datos.ingredientes.forEach(ing => {
              const cantidadTotal = (parseFloat(ing.porcion) || 1) * (parseFloat(ing.ingrediente.porcion_Ingrediente) || 1);
              ingredientesPorDia[dia].push(
                `${ing.ingrediente.nombre_Ingrediente} `
              );
            });
          }
        }
      });
      return ingredientesPorDia;
    }

    // Función para exportar ingredientes a PDF agrupados por día
    function exportarIngredientesPDF() {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      doc.setFontSize(16);
      doc.text('Menú Semanal - Lista de Ingredientes', 10, 15);
      
      const ingredientesPorDia = obtenerIngredientesPorDia();
      let y = 30;

      diasSemana.forEach(dia => {
        if (y > 260) {
          doc.addPage();
          y = 20;
        }
        
        doc.setFontSize(14);
        doc.setFont(undefined, 'bold');
        doc.text(dia, 10, y);
        y += 8;
        
        doc.setFontSize(10);
        doc.setFont(undefined, 'normal');

        const ingredientes = ingredientesPorDia[dia];
        if (ingredientes.length === 0) {
          doc.text('Sin ingredientes programados', 15, y);
          y += 6;
        } else {
          ingredientes.forEach(ing => {
            if (y > 280) {
              doc.addPage();
              y = 20;
            }
            doc.text(`• ${ing}`, 15, y);
            y += 5;
          });
        }
        y += 5;
      });

      doc.save('menu-semanal-ingredientes.pdf');
    }

    // Inicialización cuando se carga el DOM
    document.addEventListener('DOMContentLoaded', () => {
      cargarMenuGuardado();
      renderizarTablaTiempos();
      
      // Botón para agregar fila
      const botonAgregarFila = document.getElementById('agregar-fila');
      if (botonAgregarFila) {
        botonAgregarFila.addEventListener('click', agregarFila);
      }

      // Botón para eliminar última fila
      const botonEliminarFila = document.getElementById('eliminar-fila');
      if (botonEliminarFila) {
        botonEliminarFila.addEventListener('click', eliminarUltimaFila);
      }

      // Botón para exportar PDF
      const exportarBtn = document.getElementById('exportar-pdf');
      if (exportarBtn) {
        exportarBtn.addEventListener('click', exportarIngredientesPDF);
      }
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</Layout>