---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
import { db } from "../../lib/db.ts";

const url = new URL(Astro.request.url);
const selectedIngredientIds = url.searchParams.getAll("ingredients").map(id => Number(id));

let ingredientesPorTipo = {};

if (selectedIngredientIds.length > 0) {
  const ingredientesSeleccionados = await db
    .selectFrom("ingredients")
    .innerJoin("Ingredient_Types", "ingredients.ingType_ID", "Ingredient_Types.ingType_ID")
    .select([
      "ingredients.ingredient_ID",
      "ingredients.nombre_Ingrediente", 
      "ingredients.porcion_Ingrediente",
      "ingredients.unidad_Ingrediente",
      "ingredients.ingType_ID",
      "Ingredient_Types.ingType_Name"
    ])
    .where("ingredients.ingredient_ID", "in", selectedIngredientIds)
    .execute();

  // Agrupa por tipo
  ingredientesPorTipo = ingredientesSeleccionados.reduce((acc, ing) => {
    const key = String(ing.ingType_ID);
    if (!acc[key]) acc[key] = [];
    acc[key].push(ing);
    return acc;
  }, {});
}

let tiemposComida = ['Desayuno', 'Batido', 'Almuerzo', 'Comida', 'Colación', 'Cena'];
const diasSemana = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];

let equivalentesPorTiempo = {
  'Desayuno': [
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 }
  ],
  'Batido': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '8', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '5', nombre: '1 cereal', cantidad: 1 },
    { tipoId: '7', nombre: '1 lácteo', cantidad: 1 }
  ],
  'Almuerzo': [
    { tipoId: '5', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '2', nombre: '2 origen animal', cantidad: 2 },
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 }
  ],
  'Comida': [
    { tipoId: '2', nombre: '2 vegetales', cantidad: 2 },
    { tipoId: '1', nombre: '2 cereales', cantidad: 2 },
    { tipoId: '6', nombre: '1 grasa y aceite', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Colación': [
    { tipoId: '1', nombre: '1 vegetal', cantidad: 1 },
    { tipoId: '7', nombre: '1 grasa con proteína', cantidad: 1 },
    { tipoId: '4', nombre: '1 fruta', cantidad: 1 }
  ],
  'Cena': [
    { tipoId: '4', nombre: '2 frutas', cantidad: 2 },
    { tipoId: '5', nombre: '3 origen animal', cantidad: 1 },
    { tipoId: '2', nombre: '1 cereal', cantidad: 1 }
  ]
};

let horariosPorTiempo = {
  'Desayuno': '07:00',
  'Batido': '10:00',
  'Almuerzo': '13:00',
  'Comida': '16:00',
  'Colación': '18:00',
  'Cena': '20:00'
};

const tiposIngredientes = [
  { id: '1', nombre: 'Vegetales' },
  { id: '2', nombre: 'Origen Animal' },
  { id: '3', nombre: 'Leguminosas' },
  { id: '4', nombre: 'Frutas' },
  { id: '5', nombre: 'Cereales' },
  { id: '6', nombre: 'Grasas y Aceites' },
  { id: '7', nombre: 'Lácteos' },
  { id: '8', nombre: 'Grasa con Proteína' }
];
---

<Layout>
  {Object.keys(ingredientesPorTipo).length === 0 ? (
    <div class="min-h-screen flex items-center justify-center bg-gray-50">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Menú Semanal</h1>
        <p class="text-gray-600 mb-6">No se seleccionaron ingredientes</p>
        <a href="/" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition">
          Volver a seleccionar ingredientes
        </a>
      </div>
    </div>
  ) : (
    <div class="h-screen flex flex-col" style="background: linear-gradient(135deg, #4c1d95 0%, #1e1b4b 50%, #000000 100%);">
      <div class="text-center py-6 flex-shrink-0">
        <h1 class="text-3xl font-bold text-white mb-4">Menú Semanal Personalizado</h1>
        <div class="flex justify-center gap-4 flex-wrap">
          <button 
            id="generar-nuevo-menu"
            class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-full font-semibold transition duration-200"
          >
            Generar menú aleatorio
          </button>
          <!-- Nuevo botón para gestionar tiempos de comida -->
          <button 
            id="gestionar-tiempos"
            class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-full font-semibold transition duration-200"
          >
            Gestionar tiempos de comida
          </button>
        </div>
      </div>
      
      <!-- Modal para gestionar tiempos de comida -->
      <div id="modal-tiempos" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Gestionar Tiempos de Comida</h2>
            <button id="cerrar-modal" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
          </div>
          
          <div class="mb-6">
            <h3 class="text-lg font-semibold mb-3">Agregar Nuevo Tiempo de Comida</h3>
            <div class="flex gap-2 mb-4">
              <input 
                type="text" 
                id="nuevo-tiempo-nombre" 
                placeholder="Nombre del tiempo de comida"
                class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
              <button 
                id="agregar-tiempo"
                class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg font-semibold transition"
              >
                Agregar
              </button>
            </div>
          </div>
          
          <div id="lista-tiempos-personalizados">
            <!-- Los tiempos personalizados aparecerán aquí -->
          </div>
          
          <div class="flex justify-end gap-4 mt-6">
            <button 
              id="cancelar-cambios"
              class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-semibold transition"
            >
              Cancelar
            </button>
            <button 
              id="guardar-cambios"
              class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold transition"
            >
              Guardar Cambios
            </button>
          </div>
        </div>
      </div>

      <!-- Modal para editar tiempo específico -->
      <div id="modal-editar-tiempo" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Editar tiempo de comida</h2>
            <button id="cerrar-modal-editar" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
          </div>
          
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Nombre del tiempo de comida</label>
            <input 
              type="text" 
              id="editar-tiempo-nombre" 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
          </div>
          
          <!-- Agregando campo de horario -->
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Horario</label>
            <input 
              type="time" 
              id="editar-tiempo-horario" 
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
          </div>
          
          <div class="mb-6">
            <div class="flex justify-between items-center mb-3">
              <label class="block text-sm font-medium text-gray-700">Equivalencias (tipos de alimentos)</label>
              <button 
                id="agregar-equivalencia-editar"
                class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm font-semibold transition"
              >
                + Agregar
              </button>
            </div>
            <div id="equivalencias-editar" class="space-y-2">
              <!-- Las equivalencias aparecerán aquí -->
            </div>
          </div>
          
          <div class="mt-6">
            <label class="block text-sm font-medium text-gray-700 mb-3">Días en los que aplica este tiempo de comida</label>
            <div class="grid grid-cols-2 gap-2">
              {diasSemana.map(dia => (
                <label class="flex items-center space-x-2">
                  <input 
                    type="checkbox" 
                    class="dia-checkbox" 
                    data-dia={dia}
                    class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  >
                  <span class="text-sm text-gray-700">{dia}</span>
                </label>
              ))}
            </div>
          </div>
          
          <div class="flex justify-end gap-4">
            <button 
              id="cancelar-editar"
              class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-semibold transition"
            >
              Cancelar
            </button>
            <button 
              id="guardar-editar"
              class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold transition"
            >
              Guardar
            </button>
          </div>
        </div>
      </div>

      <div class="flex-1 px-4 pb-4 overflow-hidden">
        <div class="h-full w-full bg-white rounded-lg shadow-xl overflow-hidden flex flex-col">
          <!-- Contenedor responsivo -->
          <div class="overflow-x-auto w-full h-full">
            <table class="w-full min-w-[800px] table-fixed">
              <thead class="flex-shrink-0">
                <tr class="bg-gray-100">
                  <th class="px-2 py-2 text-left font-bold text-gray-800 border-r border-gray-300 text-xs sticky left-0 bg-gray-100 z-10">
                    TIPO DE ALIMENTO
                  </th>
                  {diasSemana.map(dia => (
                    <th class="px-2 py-2 text-center font-bold text-gray-800 border-r border-gray-300 text-xs">
                      {dia.toUpperCase()}
                    </th>
                  ))}
                  <th class="px-2 py-2 text-center font-bold text-gray-800 text-xs bg-gray-100 sticky right-16 z-10">
                    EQUIVALENCIAS
                  </th>
                  <!-- Agregando columna de acciones -->
                  <th class="px-2 py-2 text-center font-bold text-gray-800 text-xs bg-gray-100 sticky right-0 z-10">
                    ACCIONES
                  </th>
                </tr>
              </thead>
              <tbody class="flex-1" id="tabla-tiempos">
                <!-- Los tiempos de comida ahora se generan dinámicamente -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  )}

  <script define:vars={{ ingredientesPorTipo, tiemposComida, diasSemana, equivalentesPorTiempo, tiposIngredientes, horariosPorTiempo }}>
    let ingredientesUsados = new Set();
    let tiemposPersonalizados = [...tiemposComida];
    let equivalenciasPersonalizadas = {};
    
    Object.keys(equivalentesPorTiempo).forEach(tiempo => {
      equivalenciasPersonalizadas[tiempo] = {
        equivalencias: equivalentesPorTiempo[tiempo],
        diasAplicables: [...diasSemana] // Por defecto todos los días
      };
    });
    
    let tiempoEditando = null;

    const coloresPorTipo = {
      '1': 'text-green-600',    // Vegetales
      '2': 'text-red-600',      // Origen animal  
      '4': 'text-orange-500',   // Frutas
      '5': 'text-blue-600',     // Cereales
      '6': 'text-purple-600',   // Grasas
      '7': 'text-pink-600',     // Grasa con proteína
      '8': 'text-cyan-600'      // Lácteos
    };

    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    function generarIngredientesParaTiempo(tiempo, evitarRepeticion = true) {
      const tiempoKey = tiempo.toLowerCase().replace(/\s+/g, '-');
      const tiempoData = equivalenciasPersonalizadas[tiempo];
      
      if (!tiempoData || !tiempoData.equivalencias) return;

      diasSemana.forEach(dia => {
        const celda = document.getElementById(`${tiempoKey}-${dia.toLowerCase()}`);
        if (!celda) return;
        
        if (!tiempoData.diasAplicables.includes(dia)) {
          celda.innerHTML = '<div class="text-xs text-gray-400 italic">No aplica</div>';
          return;
        }
        
        const ingredientesDelDia = [];
        
        tiempoData.equivalencias.forEach(equiv => {
          const ingredientesDelTipo = ingredientesPorTipo[equiv.tipoId];
          
          if (ingredientesDelTipo && ingredientesDelTipo.length > 0) {
            if (equiv.tipoId === '2' || equiv.tipoId === '5') { // Origen animal o cereales
              let disponibles = [...ingredientesDelTipo];
              
              if (evitarRepeticion && disponibles.length > 1) {
                disponibles = disponibles.filter(ing => !ingredientesUsados.has(ing.ingredient_ID));
                
                if (disponibles.length === 0) {
                  disponibles = [...ingredientesDelTipo];
                }
              }
              
              const shuffled = shuffleArray(disponibles);
              const ingredienteSeleccionado = shuffled[0];
              
              if (evitarRepeticion) {
                ingredientesUsados.add(ingredienteSeleccionado.ingredient_ID);
              }
              
              // Multiplicar la porción por la cantidad de equivalencias
              const porcionMultiplicada = parseInt(ingredienteSeleccionado.porcion_Ingrediente) * equiv.cantidad;
              
              // Crear un objeto con la porción multiplicada
              const ingredienteConPorcionMultiplicada = {
                ...ingredienteSeleccionado,
                porcion_Ingrediente: porcionMultiplicada
              };
              
              ingredientesDelDia.push(ingredienteConPorcionMultiplicada);
            } else {
              let disponibles = [...ingredientesDelTipo];
              
              if (evitarRepeticion && disponibles.length > equiv.cantidad) {
                disponibles = disponibles.filter(ing => !ingredientesUsados.has(ing.ingredient_ID));
                
                if (disponibles.length < equiv.cantidad) {
                  disponibles = [...ingredientesDelTipo];
                }
              }
              
              const shuffled = shuffleArray(disponibles);
              const seleccionados = shuffled.slice(0, Math.min(equiv.cantidad, shuffled.length));
              
              if (evitarRepeticion) {
                seleccionados.forEach(ing => ingredientesUsados.add(ing.ingredient_ID));
              }
              
              ingredientesDelDia.push(...seleccionados);
            }
          }
        });

        celda.innerHTML = ingredientesDelDia.map(ing => {
          const colorClass = coloresPorTipo[ing.ingType_ID] || 'text-gray-700';
          return `<div class="ingredient-item cursor-pointer hover:bg-gray-100 px-1 py-0.5 rounded transition-colors duration-200" data-ingredient-id="${ing.ingredient_ID}" data-tipo-id="${ing.ingType_ID}" data-celda-id="${tiempoKey}-${dia.toLowerCase()}">
            <div class="font-medium ${colorClass} text-xs leading-tight">${ing.nombre_Ingrediente} ${ing.porcion_Ingrediente} ${ing.unidad_Ingrediente}</div>
          </div>`;
        }).join('');
      });
    }

    function reemplazarIngredienteIndividual(ingredientElement) {
      const ingredientId = parseInt(ingredientElement.dataset.ingredientId);
      const tipoId = ingredientElement.dataset.tipoId;
      const celdaId = ingredientElement.dataset.celdaId;
      
      const ingredientesDelTipo = ingredientesPorTipo[tipoId];
      if (!ingredientesDelTipo || ingredientesDelTipo.length <= 1) return;
      
      const otrosIngredientes = ingredientesDelTipo.filter(ing => ing.ingredient_ID !== ingredientId);
      const nuevoIngrediente = otrosIngredientes[Math.floor(Math.random() * otrosIngredientes.length)];
      
      const colorClass = coloresPorTipo[tipoId] || 'text-gray-700';
      ingredientElement.innerHTML = `
        <div class="font-medium ${colorClass} text-xs leading-tight">${nuevoIngrediente.nombre_Ingrediente} ${nuevoIngrediente.porcion_Ingrediente} ${nuevoIngrediente.unidad_Ingrediente}</div>
      `;
      
      ingredientElement.dataset.ingredientId = nuevoIngrediente.ingredient_ID;
    }

    function configurarEventListeners() {
      document.querySelectorAll('.ingredient-item').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          reemplazarIngredienteIndividual(this);
        });
      });
    }

    function renderizarTablaTiempos() {
      const tbody = document.getElementById('tabla-tiempos');
      tbody.innerHTML = tiemposPersonalizados.map((tiempo, index) => `
        <tr class="border-b border-gray-200">
          <td class="px-2 py-2 font-semibold text-gray-900 border-r border-gray-300 bg-gray-50 align-top text-xs sticky left-0 z-10">
            <div class="space-y-1">
              <div class="font-bold">${tiempo}</div>
              <div class="text-xs text-purple-600 font-semibold">
                ${horariosPorTiempo[tiempo] || 'Sin horario'}
              </div>
              <div class="text-xs text-blue-600">
                ${equivalenciasPersonalizadas[tiempo]?.diasAplicables?.join(', ') || 'Todos'}
              </div>
            </div>
          </td>
          ${diasSemana.map(dia => {
            const tiempoData = equivalenciasPersonalizadas[tiempo];
            const aplicaEnEsteDia = tiempoData && tiempoData.diasAplicables.includes(dia);
            
            return `
              <td class="px-2 py-2 border-r border-gray-300 align-top ${aplicaEnEsteDia ? '' : 'bg-gray-100'}">
                <div id="${tiempo.toLowerCase().replace(/\s+/g, '-')}-${dia.toLowerCase()}" class="space-y-1">
                  ${aplicaEnEsteDia ? '<!-- Ingredientes generados aparecerán aquí -->' : '<div class="text-xs text-gray-400 italic">No aplica</div>'}
                </div>
              </td>
            `;
          }).join('')}
          <td class="px-2 py-2 bg-gray-50 align-top sticky right-16 z-10">
            <div class="space-y-1">
              ${equivalenciasPersonalizadas[tiempo]?.equivalencias?.map(equiv => `
                <div class="text-xs text-gray-700">
                  ${equiv.nombre}
                </div>
              `).join('') || ''}
            </div>
          </td>
          <td class="px-2 py-2 bg-gray-50 align-top sticky right-0 z-10">
            <div class="flex gap-1 justify-center">
              <button 
                class="btn-edit bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs transition-colors duration-200"
                data-tiempo="${tiempo}"
                title="Editar ${tiempo}"
              >
                ✏️
              </button>
              <button 
                class="btn-delete bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs transition-colors duration-200"
                data-tiempo="${tiempo}"
                title="Eliminar ${tiempo}"
              >
                🗑️
              </button>
            </div>
          </td>
        </tr>
      `).join('');
      
      configurarEventListenersAcciones();
    }

    function configurarEventListenersAcciones() {
      // Botones de editar
      document.querySelectorAll('.btn-edit').forEach(btn => {
        btn.addEventListener('click', function() {
          const tiempo = this.dataset.tiempo;
          mostrarModalEditarTiempo(tiempo);
        });
      });

      // Botones de eliminar
      document.querySelectorAll('.btn-delete').forEach(btn => {
        btn.addEventListener('click', function() {
          const tiempo = this.dataset.tiempo;
          tiemposPersonalizados = tiemposPersonalizados.filter(t => t !== tiempo);
          delete equivalenciasPersonalizadas[tiempo];
          delete horariosPorTiempo[tiempo];
          renderizarTablaTiempos();
          generarMenuCompleto(true);
        });
      });
    }

    function mostrarModalEditarTiempo(tiempo) {
      tiempoEditando = tiempo;
      const modal = document.getElementById('modal-editar-tiempo');
      const nombreInput = document.getElementById('editar-tiempo-nombre');
      const horarioInput = document.getElementById('editar-tiempo-horario');
      
      nombreInput.value = tiempo;
      horarioInput.value = horariosPorTiempo[tiempo] || '12:00';
      renderizarEquivalenciasEditar(tiempo);
      
      const tiempoData = equivalenciasPersonalizadas[tiempo];
      const diasAplicables = tiempoData?.diasAplicables || [...diasSemana];
      
      // Marcar los checkboxes según los días aplicables
      document.querySelectorAll('.dia-checkbox').forEach(checkbox => {
        const dia = checkbox.dataset.dia;
        checkbox.checked = diasAplicables.includes(dia);
      });
      
      modal.classList.remove('hidden');
    }

    function renderizarEquivalenciasEditar(tiempo) {
      const container = document.getElementById('equivalencias-editar');
      const tiempoData = equivalenciasPersonalizadas[tiempo];
      const equivalencias = tiempoData?.equivalencias || [];
      
      container.innerHTML = equivalencias.map((equiv, index) => `
        <div class="flex items-center gap-2 bg-gray-50 p-3 rounded-lg">
          <select class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" data-index="${index}">
            <option value="1">1</option>
            <option value="2" ${equiv.cantidad === 2 ? 'selected' : ''}>2</option>
            <option value="3" ${equiv.cantidad === 3 ? 'selected' : ''}>3</option>
            <option value="4" ${equiv.cantidad === 4 ? 'selected' : ''}>4</option>
            <option value="5" ${equiv.cantidad === 5 ? 'selected' : ''}>5</option>
          </select>
          <select class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" data-index="${index}" data-tipo="true">
            ${tiposIngredientes.map(tipo => `
              <option value="${tipo.id}" ${equiv.tipoId === tipo.id ? 'selected' : ''}>${tipo.nombre}</option>
            `).join('')}
          </select>
          <button 
            class="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-semibold transition eliminar-equiv-editar"
            data-index="${index}"
          >
            ×
          </button>
        </div>
      `).join('');
      
      configurarEventListenersModalEditar();
    }

    function configurarEventListenersModalEditar() {
      // Eliminar equivalencia
      document.querySelectorAll('.eliminar-equiv-editar').forEach(btn => {
        btn.addEventListener('click', function() {
          const index = parseInt(this.dataset.index);
          equivalenciasPersonalizadas[tiempoEditando].equivalencias.splice(index, 1);
          renderizarEquivalenciasEditar(tiempoEditando);
        });
      });

      // Cambiar cantidad o tipo
      document.querySelectorAll('#equivalencias-editar select').forEach(select => {
        select.addEventListener('change', function() {
          const index = parseInt(this.dataset.index);
          const esTipo = this.dataset.tipo === 'true';
          
          if (esTipo) {
            const tipoSeleccionado = tiposIngredientes.find(t => t.id === this.value);
            equivalenciasPersonalizadas[tiempoEditando].equivalencias[index].tipoId = this.value;
            const cantidad = equivalenciasPersonalizadas[tiempoEditando].equivalencias[index].cantidad;
            equivalenciasPersonalizadas[tiempoEditando].equivalencias[index].nombre = `${cantidad} ${tipoSeleccionado.nombre.toLowerCase()}${cantidad > 1 ? 's' : ''}`;
          } else {
            const cantidad = parseInt(this.value);
            equivalenciasPersonalizadas[tiempoEditando].equivalencias[index].cantidad = cantidad;
            const tipoId = equivalenciasPersonalizadas[tiempoEditando].equivalencias[index].tipoId;
            const tipoNombre = tiposIngredientes.find(t => t.id === tipoId).nombre.toLowerCase();
            equivalenciasPersonalizadas[tiempoEditando].equivalencias[index].nombre = `${cantidad} ${tipoNombre}${cantidad > 1 ? 's' : ''}`;
          }
        });
      });

      document.querySelectorAll('.dia-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          const dia = this.dataset.dia;
          
          // Asegurar que diasAplicables existe
          if (!equivalenciasPersonalizadas[tiempoEditando].diasAplicables) {
            equivalenciasPersonalizadas[tiempoEditando].diasAplicables = [];
          }
          
          if (this.checked) {
            // Agregar día si no está en la lista
            if (!equivalenciasPersonalizadas[tiempoEditando].diasAplicables.includes(dia)) {
              equivalenciasPersonalizadas[tiempoEditando].diasAplicables.push(dia);
            }
          } else {
            // Remover día de la lista
            equivalenciasPersonalizadas[tiempoEditando].diasAplicables = 
              equivalenciasPersonalizadas[tiempoEditando].diasAplicables.filter(d => d !== dia);
          }
          
          console.log(`Días aplicables para ${tiempoEditando}:`, equivalenciasPersonalizadas[tiempoEditando].diasAplicables);
        });
      });
    }

    function generarMenuCompleto(nuevo = false) {
      if (nuevo) {
        ingredientesUsados.clear();
      }
      
      tiemposPersonalizados.forEach(tiempo => {
        generarIngredientesParaTiempo(tiempo, nuevo);
      });
      
      setTimeout(configurarEventListeners, 100);
    }

    function mostrarModalTiempos() {
      const modal = document.getElementById('modal-tiempos');
      renderizarListaTiemposPersonalizados();
      modal.classList.remove('hidden');
    }

    function renderizarListaTiemposPersonalizados() {
      const container = document.getElementById('lista-tiempos-personalizados');
      container.innerHTML = tiemposPersonalizados.map((tiempo, index) => `
        <div class="bg-gray-50 p-4 rounded-lg mb-3">
          <div class="flex justify-between items-center mb-2">
            <h4 class="font-semibold text-gray-900">${tiempo}</h4>
            <button 
              class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm eliminar-tiempo-modal"
              data-tiempo="${tiempo}"
            >
              Eliminar
            </button>
          </div>
          <div class="text-sm text-gray-600 mb-1">
            ${equivalenciasPersonalizadas[tiempo]?.equivalencias?.map(equiv => equiv.nombre).join(', ') || 'Sin equivalencias'}
          </div>
          <div class="text-xs text-purple-600 font-semibold mb-1">
            Horario: ${horariosPorTiempo[tiempo] || 'Sin horario'}
          </div>
          <div class="text-xs text-blue-600">
            Días: ${equivalenciasPersonalizadas[tiempo]?.diasAplicables?.join(', ') || 'Todos'}
          </div>
        </div>
      `).join('');
      
      // Configurar event listeners para eliminar tiempos
      document.querySelectorAll('.eliminar-tiempo-modal').forEach(btn => {
        btn.addEventListener('click', function() {
          const tiempo = this.dataset.tiempo;
          tiemposPersonalizados = tiemposPersonalizados.filter(t => t !== tiempo);
          delete equivalenciasPersonalizadas[tiempo];
          delete horariosPorTiempo[tiempo];
          renderizarListaTiemposPersonalizados();
        });
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      renderizarTablaTiempos();
      generarMenuCompleto(false);
      
      const botonNuevoMenu = document.getElementById('generar-nuevo-menu');
      if (botonNuevoMenu) {
        botonNuevoMenu.addEventListener('click', () => {
          generarMenuCompleto(true);
        });
      }

      const botonGestionar = document.getElementById('gestionar-tiempos');
      if (botonGestionar) {
        botonGestionar.addEventListener('click', mostrarModalTiempos);
      }

      const agregarTiempo = document.getElementById('agregar-tiempo');
      if (agregarTiempo) {
        agregarTiempo.addEventListener('click', () => {
          const nombreInput = document.getElementById('nuevo-tiempo-nombre');
          const nombre = nombreInput.value.trim();
          
          if (nombre && !tiemposPersonalizados.includes(nombre)) {
            tiemposPersonalizados.push(nombre);
            equivalenciasPersonalizadas[nombre] = {
              equivalencias: [{ tipoId: '1', nombre: '1 vegetal', cantidad: 1 }],
              diasAplicables: [...diasSemana] // Por defecto todos los días
            };
            horariosPorTiempo[nombre] = '12:00';
            nombreInput.value = '';
            renderizarListaTiemposPersonalizados();
          }
        });
      }

      const guardarCambios = document.getElementById('guardar-cambios');
      if (guardarCambios) {
        guardarCambios.addEventListener('click', () => {
          document.getElementById('modal-tiempos').classList.add('hidden');
          renderizarTablaTiempos();
          generarMenuCompleto(true);
        });
      }

      const cancelarCambios = document.getElementById('cancelar-cambios');
      if (cancelarCambios) {
        cancelarCambios.addEventListener('click', () => {
          document.getElementById('modal-tiempos').classList.add('hidden');
        });
      }

      const cerrarModal = document.getElementById('cerrar-modal');
      if (cerrarModal) {
        cerrarModal.addEventListener('click', () => {
          document.getElementById('modal-tiempos').classList.add('hidden');
        });
      }

      const cerrarModalEditar = document.getElementById('cerrar-modal-editar');
      if (cerrarModalEditar) {
        cerrarModalEditar.addEventListener('click', function(e) {
          e.preventDefault();
          document.getElementById('modal-editar-tiempo').classList.add('hidden');
          tiempoEditando = null;
        });
      }

      const agregarEquivalenciaEditar = document.getElementById('agregar-equivalencia-editar');
      if (agregarEquivalenciaEditar) {
        agregarEquivalenciaEditar.addEventListener('click', function(e) {
          e.preventDefault();
          if (!equivalenciasPersonalizadas[tiempoEditando]) {
            equivalenciasPersonalizadas[tiempoEditando] = {
              equivalencias: [],
              diasAplicables: [...diasSemana]
            };
          }
          if (!equivalenciasPersonalizadas[tiempoEditando].equivalencias) {
            equivalenciasPersonalizadas[tiempoEditando].equivalencias = [];
          }
          equivalenciasPersonalizadas[tiempoEditando].equivalencias.push({
            tipoId: '1',
            nombre: '1 vegetal',
            cantidad: 1
          });
          renderizarEquivalenciasEditar(tiempoEditando);
        });
      }

      const guardarEditar = document.getElementById('guardar-editar');
      if (guardarEditar) {
        guardarEditar.addEventListener('click', function(e) {
          e.preventDefault();
          const nuevoNombre = document.getElementById('editar-tiempo-nombre').value.trim();
          const nuevoHorario = document.getElementById('editar-tiempo-horario').value;
          
          const diasSeleccionados = [];
          document.querySelectorAll('.dia-checkbox:checked').forEach(checkbox => {
            diasSeleccionados.push(checkbox.dataset.dia);
          });
          
          // Actualizar los días aplicables
          if (equivalenciasPersonalizadas[tiempoEditando]) {
            equivalenciasPersonalizadas[tiempoEditando].diasAplicables = diasSeleccionados;
          }
          
          horariosPorTiempo[tiempoEditando] = nuevoHorario;
          
          if (nuevoNombre && nuevoNombre !== tiempoEditando) {
            const index = tiemposPersonalizados.indexOf(tiempoEditando);
            if (index !== -1) {
              tiemposPersonalizados[index] = nuevoNombre;
              equivalenciasPersonalizadas[nuevoNombre] = equivalenciasPersonalizadas[tiempoEditando];
              delete equivalenciasPersonalizadas[tiempoEditando];
              horariosPorTiempo[nuevoNombre] = horariosPorTiempo[tiempoEditando];
              delete horariosPorTiempo[tiempoEditando];
            }
          }
          
          document.getElementById('modal-editar-tiempo').classList.add('hidden');
          renderizarTablaTiempos();
          generarMenuCompleto(true);
          tiempoEditando = null;
        });
      }

      const cancelarEditar = document.getElementById('cancelar-editar');
      if (cancelarEditar) {
        cancelarEditar.addEventListener('click', function(e) {
          e.preventDefault();
          document.getElementById('modal-editar-tiempo').classList.add('hidden');
          tiempoEditando = null;
        });
      }
    });
  </script>
</Layout>
