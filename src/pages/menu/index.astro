---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";
import { db } from "../../lib/db.ts";

const url = new URL(Astro.request.url);
const selectedIngredientIds = url.searchParams.getAll("ingredients").map(id => Number(id));

let ingredientesPorTipo = {};

if (selectedIngredientIds.length > 0) {
  const ingredientesSeleccionados = await db
    .selectFrom("ingredients")
    .innerJoin("Ingredient_Types", "ingredients.ingType_ID", "Ingredient_Types.ingType_ID")
    .select([
      "ingredients.ingredient_ID",
      "ingredients.nombre_Ingrediente", 
      "ingredients.porcion_Ingrediente",
      "ingredients.unidad_Ingrediente",
      "ingredients.ingType_ID",
      "Ingredient_Types.ingType_Name"
    ])
    .where("ingredients.ingredient_ID", "in", selectedIngredientIds)
    .execute();

  // Agrupa por tipo
  ingredientesPorTipo = ingredientesSeleccionados.reduce((acc, ing) => {
    const key = String(ing.ingType_ID);
    if (!acc[key]) acc[key] = [];
    acc[key].push(ing);
    return acc;
  }, {});
}

const tiemposComida = ['Desayuno', 'Batido post-gym', 'Almuerzo', 'Comida', 'Colaci칩n', 'Cena'];
const diasSemana = ['Lunes', 'Martes', 'Mi칠rcoles', 'Jueves', 'Viernes', 'S치bado', 'Domingo'];

const equivalentesPorTiempo = {
  'Desayuno': [
    { tipoId: '5', nombre: 'Cereal', cantidad: 1 },
    { tipoId: '4', nombre: 'Fruta', cantidad: 2 }
  ],
  'Batido post-gym': [
    { tipoId: '4', nombre: 'Frutas', cantidad: 2 },
    { tipoId: '7', nombre: 'Grasa con prote칤na', cantidad: 1 },
    { tipoId: '5', nombre: 'Cereal', cantidad: 1 },
    { tipoId: '8', nombre: 'L치cteo', cantidad: 1 }
  ],
  'Almuerzo': [
    { tipoId: '5', nombre: 'Cereales', cantidad: 2 },
    { tipoId: '2', nombre: 'O.Animal', cantidad: 2 },
    { tipoId: '1', nombre: 'Vegetal', cantidad: 1 },
    { tipoId: '6', nombre: 'Grasa', cantidad: 1 }
  ],
  'Comida': [
    { tipoId: '2', nombre: 'O.Animal', cantidad: 2 },
    { tipoId: '1', nombre: 'Vegetal', cantidad: 2 },
    { tipoId: '5', nombre: 'Cereales', cantidad: 2 },
    { tipoId: '6', nombre: 'Grasa', cantidad: 3 },
    { tipoId: '4', nombre: 'Fruta', cantidad: 1 }
  ],
  'Colaci칩n': [
    { tipoId: '1', nombre: 'Vegetal', cantidad: 1 },
    { tipoId: '6', nombre: 'Grasa', cantidad: 1 },
    { tipoId: '4', nombre: 'Fruta', cantidad: 2 }
  ],
  'Cena': [
    { tipoId: '4', nombre: 'Fruta', cantidad: 1 },
    { tipoId: '5', nombre: 'Cereal', cantidad: 1 },
    { tipoId: '2', nombre: 'O.Animal', cantidad: 1 }
  ]
};
---

<Layout>
  {Object.keys(ingredientesPorTipo).length === 0 ? (
    <div class="min-h-screen flex items-center justify-center bg-gray-50">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Men칰 Semanal</h1>
        <p class="text-gray-600 mb-6">No se seleccionaron ingredientes</p>
        <a href="/" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition">
          Volver a seleccionar ingredientes
        </a>
      </div>
    </div>
  ) : (
    <div class="min-h-screen bg-slate-50 py-10">
      <div class="max-w-7xl mx-auto px-6">
        <div class="flex justify-between items-center mb-10">
          <h1 class="text-4xl font-extrabold text-slate-800 tracking-tight">Men칰 Semanal</h1>
          <!-- Added button to generate new menu -->
          <button 
            id="generar-nuevo-menu"
            class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition duration-200 flex items-center gap-2"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Generar Nuevo Men칰
          </button>
        </div>

        <!-- Redesigned table with Equivalentes column -->
        <div class="bg-white rounded-lg shadow-lg overflow-hidden">
          <table class="w-full">
            <thead>
              <tr class="bg-gray-100">
                <th class="px-4 py-3 text-left font-semibold text-gray-700 border-r"></th>
                {diasSemana.map(dia => (
                  <th class="px-4 py-3 text-center font-semibold text-gray-700 border-r">{dia}</th>
                ))}
                <th class="px-4 py-3 text-center font-semibold text-purple-700 border-r bg-purple-50">Equivalentes</th>
              </tr>
            </thead>
            <tbody>
              {tiemposComida.map((tiempo, index) => (
                <tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                  <td class="px-4 py-6 font-medium text-gray-900 border-r border-b">{tiempo}</td>
                  {diasSemana.map(dia => (
                    <td class="px-4 py-6 border-r border-b">
                      <div id={`${tiempo.toLowerCase().replace(/\s+/g, '-')}-${dia.toLowerCase()}`} class="min-h-[80px] text-sm text-gray-600">
                        <!-- Ingredientes generados aparecer치n aqu칤 -->
                      </div>
                    </td>
                  ))}
                  <td class="px-4 py-6 border-b bg-purple-50">
                    <div class="text-xs space-y-1">
                      {equivalentesPorTiempo[tiempo]?.map(equiv => (
                        <div class="flex items-center gap-1">
                          <span class="font-semibold text-purple-700">{equiv.cantidad}</span>
                          <span class="text-gray-700">{equiv.nombre}</span>
                        </div>
                      ))}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )}

  <script define:vars={{ ingredientesPorTipo, tiemposComida, diasSemana, equivalentesPorTiempo }}>
    let ingredientesUsados = new Set();

    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    function generarIngredientesParaTiempo(tiempo, evitarRepeticion = true) {
      const tiempoKey = tiempo.toLowerCase().replace(/\s+/g, '-');
      const equivalentes = equivalentesPorTiempo[tiempo];
      
      if (!equivalentes) return;

      diasSemana.forEach(dia => {
        const celda = document.getElementById(`${tiempoKey}-${dia.toLowerCase()}`);
        const ingredientesDelDia = [];
        
        equivalentes.forEach(equiv => {
          const ingredientesDelTipo = ingredientesPorTipo[equiv.tipoId];
          
          if (ingredientesDelTipo && ingredientesDelTipo.length > 0) {
            let disponibles = [...ingredientesDelTipo];
            
            // Si hay suficientes ingredientes y queremos evitar repetici칩n
            if (evitarRepeticion && disponibles.length > equiv.cantidad) {
              disponibles = disponibles.filter(ing => !ingredientesUsados.has(ing.ingredient_ID));
              
              // Si no quedan suficientes sin usar, usar todos
              if (disponibles.length < equiv.cantidad) {
                disponibles = [...ingredientesDelTipo];
              }
            }
            
            const shuffled = shuffleArray(disponibles);
            const seleccionados = shuffled.slice(0, Math.min(equiv.cantidad, shuffled.length));
            
            // Marcar como usados
            if (evitarRepeticion) {
              seleccionados.forEach(ing => ingredientesUsados.add(ing.ingredient_ID));
            }
            
            ingredientesDelDia.push(...seleccionados);
          }
        });

        celda.innerHTML = ingredientesDelDia.map(ing => 
          `<div class="mb-1 text-xs bg-slate-100 px-2 py-1 rounded border-l-2 border-purple-400 ingredient-item cursor-pointer hover:bg-red-100 hover:border-red-400 transition-colors duration-200" data-ingredient-id="${ing.ingredient_ID}" data-tipo-id="${ing.ingType_ID}" data-celda-id="${tiempoKey}-${dia.toLowerCase()}">
            <div class="font-medium text-gray-800">${ing.nombre_Ingrediente}</div>
            <div class="text-slate-500">${ing.porcion_Ingrediente} ${ing.unidad_Ingrediente}</div>
            <div class="text-xs text-red-600 opacity-0 hover:opacity-100 transition-opacity">游댃 Clic para cambiar</div>
          </div>`
        ).join('');
      });
    }

    function reemplazarIngredienteIndividual(ingredientElement) {
      const ingredientId = parseInt(ingredientElement.dataset.ingredientId);
      const tipoId = ingredientElement.dataset.tipoId;
      const celdaId = ingredientElement.dataset.celdaId;
      
      const ingredientesDelTipo = ingredientesPorTipo[tipoId];
      if (!ingredientesDelTipo || ingredientesDelTipo.length <= 1) return;
      
      // Filtrar el ingrediente actual y obtener uno aleatorio diferente
      const otrosIngredientes = ingredientesDelTipo.filter(ing => ing.ingredient_ID !== ingredientId);
      const nuevoIngrediente = otrosIngredientes[Math.floor(Math.random() * otrosIngredientes.length)];
      
      // Reemplazar el contenido del elemento
      ingredientElement.innerHTML = `
        <div class="font-medium text-gray-800">${nuevoIngrediente.nombre_Ingrediente}</div>
        <div class="text-slate-500">${nuevoIngrediente.porcion_Ingrediente} ${nuevoIngrediente.unidad_Ingrediente}</div>
        <div class="text-xs text-red-600 opacity-0 hover:opacity-100 transition-opacity">游댃 Clic para cambiar</div>
      `;
      
      // Actualizar el data-ingredient-id
      ingredientElement.dataset.ingredientId = nuevoIngrediente.ingredient_ID;
    }

    function configurarEventListeners() {
      document.querySelectorAll('.ingredient-item').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          reemplazarIngredienteIndividual(this);
        });
      });
    }

    function generarMenuCompleto(nuevo = false) {
      if (nuevo) {
        ingredientesUsados.clear();
      }
      
      tiemposComida.forEach(tiempo => {
        generarIngredientesParaTiempo(tiempo, nuevo);
      });
      
      setTimeout(configurarEventListeners, 100);
    }

    document.addEventListener('DOMContentLoaded', () => {
      generarMenuCompleto(false);
      
      const botonNuevoMenu = document.getElementById('generar-nuevo-menu');
      if (botonNuevoMenu) {
        botonNuevoMenu.addEventListener('click', () => {
          generarMenuCompleto(true);
        });
      }
    });
  </script>
</Layout>
